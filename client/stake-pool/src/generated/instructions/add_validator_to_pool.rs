//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct AddValidatorToPool {
      
              
          pub stake_pool: solana_program::pubkey::Pubkey,
          
              
          pub staker: solana_program::pubkey::Pubkey,
          
              
          pub funder: solana_program::pubkey::Pubkey,
          
              
          pub stake_pool_withdraw: solana_program::pubkey::Pubkey,
          
              
          pub validator_list: solana_program::pubkey::Pubkey,
          
              
          pub stake: solana_program::pubkey::Pubkey,
          
              
          pub validator: solana_program::pubkey::Pubkey,
          
              
          pub rent: solana_program::pubkey::Pubkey,
          
              
          pub clock: solana_program::pubkey::Pubkey,
          
              
          pub sysvar_stake_history: solana_program::pubkey::Pubkey,
          
              
          pub stake_config: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub stake_program: solana_program::pubkey::Pubkey,
      }

impl AddValidatorToPool {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(13+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.stake_pool,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.staker,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.funder,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_pool_withdraw,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.validator_list,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.stake,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.validator,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.clock,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.sysvar_stake_history,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_config,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let data = borsh::to_vec(&AddValidatorToPoolInstructionData::new()).unwrap();
    
    solana_program::instruction::Instruction {
      program_id: crate::SPL_STAKE_POOL_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct AddValidatorToPoolInstructionData {
            discriminator: [u8; 8],
      }

impl AddValidatorToPoolInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [181, 6, 29, 25, 192, 211, 190, 187],
                  }
  }
}

impl Default for AddValidatorToPoolInstructionData {
  fn default() -> Self {
    Self::new()
  }
}



/// Instruction builder for `AddValidatorToPool`.
///
/// ### Accounts:
///
                ///   0. `[writable]` stake_pool
                ///   1. `[signer]` staker
                      ///   2. `[writable, signer]` funder
          ///   3. `[]` stake_pool_withdraw
                ///   4. `[writable]` validator_list
                ///   5. `[writable]` stake
          ///   6. `[]` validator
                ///   7. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
          ///   8. `[]` clock
                ///   9. `[optional]` sysvar_stake_history (default to `SysvarStakeHistory1111111111111111111111111`)
          ///   10. `[]` stake_config
                ///   11. `[optional]` system_program (default to `11111111111111111111111111111111`)
          ///   12. `[]` stake_program
#[derive(Clone, Debug, Default)]
pub struct AddValidatorToPoolBuilder {
            stake_pool: Option<solana_program::pubkey::Pubkey>,
                staker: Option<solana_program::pubkey::Pubkey>,
                funder: Option<solana_program::pubkey::Pubkey>,
                stake_pool_withdraw: Option<solana_program::pubkey::Pubkey>,
                validator_list: Option<solana_program::pubkey::Pubkey>,
                stake: Option<solana_program::pubkey::Pubkey>,
                validator: Option<solana_program::pubkey::Pubkey>,
                rent: Option<solana_program::pubkey::Pubkey>,
                clock: Option<solana_program::pubkey::Pubkey>,
                sysvar_stake_history: Option<solana_program::pubkey::Pubkey>,
                stake_config: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                stake_program: Option<solana_program::pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl AddValidatorToPoolBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn stake_pool(&mut self, stake_pool: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.stake_pool = Some(stake_pool);
                    self
    }
            #[inline(always)]
    pub fn staker(&mut self, staker: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.staker = Some(staker);
                    self
    }
            #[inline(always)]
    pub fn funder(&mut self, funder: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.funder = Some(funder);
                    self
    }
            #[inline(always)]
    pub fn stake_pool_withdraw(&mut self, stake_pool_withdraw: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.stake_pool_withdraw = Some(stake_pool_withdraw);
                    self
    }
            #[inline(always)]
    pub fn validator_list(&mut self, validator_list: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.validator_list = Some(validator_list);
                    self
    }
            #[inline(always)]
    pub fn stake(&mut self, stake: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.stake = Some(stake);
                    self
    }
            #[inline(always)]
    pub fn validator(&mut self, validator: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.validator = Some(validator);
                    self
    }
            /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
#[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.rent = Some(rent);
                    self
    }
            #[inline(always)]
    pub fn clock(&mut self, clock: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.clock = Some(clock);
                    self
    }
            /// `[optional account, default to 'SysvarStakeHistory1111111111111111111111111']`
#[inline(always)]
    pub fn sysvar_stake_history(&mut self, sysvar_stake_history: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.sysvar_stake_history = Some(sysvar_stake_history);
                    self
    }
            #[inline(always)]
    pub fn stake_config(&mut self, stake_config: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.stake_config = Some(stake_config);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            #[inline(always)]
    pub fn stake_program(&mut self, stake_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.stake_program = Some(stake_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = AddValidatorToPool {
                              stake_pool: self.stake_pool.expect("stake_pool is not set"),
                                        staker: self.staker.expect("staker is not set"),
                                        funder: self.funder.expect("funder is not set"),
                                        stake_pool_withdraw: self.stake_pool_withdraw.expect("stake_pool_withdraw is not set"),
                                        validator_list: self.validator_list.expect("validator_list is not set"),
                                        stake: self.stake.expect("stake is not set"),
                                        validator: self.validator.expect("validator is not set"),
                                        rent: self.rent.unwrap_or(solana_program::pubkey!("SysvarRent111111111111111111111111111111111")),
                                        clock: self.clock.expect("clock is not set"),
                                        sysvar_stake_history: self.sysvar_stake_history.unwrap_or(solana_program::pubkey!("SysvarStakeHistory1111111111111111111111111")),
                                        stake_config: self.stake_config.expect("stake_config is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                                        stake_program: self.stake_program.expect("stake_program is not set"),
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `add_validator_to_pool` CPI accounts.
  pub struct AddValidatorToPoolCpiAccounts<'a, 'b> {
          
                    
              pub stake_pool: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub staker: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub funder: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub stake_pool_withdraw: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub validator_list: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub stake: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub validator: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub rent: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub clock: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub sysvar_stake_history: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub stake_config: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub stake_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `add_validator_to_pool` CPI instruction.
pub struct AddValidatorToPoolCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub stake_pool: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub staker: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub funder: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub stake_pool_withdraw: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub validator_list: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub stake: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub validator: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub rent: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub clock: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub sysvar_stake_history: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub stake_config: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub stake_program: &'b solana_program::account_info::AccountInfo<'a>,
        }

impl<'a, 'b> AddValidatorToPoolCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: AddValidatorToPoolCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              stake_pool: accounts.stake_pool,
              staker: accounts.staker,
              funder: accounts.funder,
              stake_pool_withdraw: accounts.stake_pool_withdraw,
              validator_list: accounts.validator_list,
              stake: accounts.stake,
              validator: accounts.validator,
              rent: accounts.rent,
              clock: accounts.clock,
              sysvar_stake_history: accounts.sysvar_stake_history,
              stake_config: accounts.stake_config,
              system_program: accounts.system_program,
              stake_program: accounts.stake_program,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(13+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.stake_pool.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.staker.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.funder.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_pool_withdraw.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.validator_list.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.stake.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.validator.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.clock.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.sysvar_stake_history.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_config.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = borsh::to_vec(&AddValidatorToPoolInstructionData::new()).unwrap();
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::SPL_STAKE_POOL_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(14 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.stake_pool.clone());
                        account_infos.push(self.staker.clone());
                        account_infos.push(self.funder.clone());
                        account_infos.push(self.stake_pool_withdraw.clone());
                        account_infos.push(self.validator_list.clone());
                        account_infos.push(self.stake.clone());
                        account_infos.push(self.validator.clone());
                        account_infos.push(self.rent.clone());
                        account_infos.push(self.clock.clone());
                        account_infos.push(self.sysvar_stake_history.clone());
                        account_infos.push(self.stake_config.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.stake_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `AddValidatorToPool` via CPI.
///
/// ### Accounts:
///
                ///   0. `[writable]` stake_pool
                ///   1. `[signer]` staker
                      ///   2. `[writable, signer]` funder
          ///   3. `[]` stake_pool_withdraw
                ///   4. `[writable]` validator_list
                ///   5. `[writable]` stake
          ///   6. `[]` validator
          ///   7. `[]` rent
          ///   8. `[]` clock
          ///   9. `[]` sysvar_stake_history
          ///   10. `[]` stake_config
          ///   11. `[]` system_program
          ///   12. `[]` stake_program
#[derive(Clone, Debug)]
pub struct AddValidatorToPoolCpiBuilder<'a, 'b> {
  instruction: Box<AddValidatorToPoolCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AddValidatorToPoolCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(AddValidatorToPoolCpiBuilderInstruction {
      __program: program,
              stake_pool: None,
              staker: None,
              funder: None,
              stake_pool_withdraw: None,
              validator_list: None,
              stake: None,
              validator: None,
              rent: None,
              clock: None,
              sysvar_stake_history: None,
              stake_config: None,
              system_program: None,
              stake_program: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn stake_pool(&mut self, stake_pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.stake_pool = Some(stake_pool);
                    self
    }
      #[inline(always)]
    pub fn staker(&mut self, staker: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.staker = Some(staker);
                    self
    }
      #[inline(always)]
    pub fn funder(&mut self, funder: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.funder = Some(funder);
                    self
    }
      #[inline(always)]
    pub fn stake_pool_withdraw(&mut self, stake_pool_withdraw: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.stake_pool_withdraw = Some(stake_pool_withdraw);
                    self
    }
      #[inline(always)]
    pub fn validator_list(&mut self, validator_list: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.validator_list = Some(validator_list);
                    self
    }
      #[inline(always)]
    pub fn stake(&mut self, stake: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.stake = Some(stake);
                    self
    }
      #[inline(always)]
    pub fn validator(&mut self, validator: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.validator = Some(validator);
                    self
    }
      #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rent = Some(rent);
                    self
    }
      #[inline(always)]
    pub fn clock(&mut self, clock: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.clock = Some(clock);
                    self
    }
      #[inline(always)]
    pub fn sysvar_stake_history(&mut self, sysvar_stake_history: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.sysvar_stake_history = Some(sysvar_stake_history);
                    self
    }
      #[inline(always)]
    pub fn stake_config(&mut self, stake_config: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.stake_config = Some(stake_config);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn stake_program(&mut self, stake_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.stake_program = Some(stake_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
        let instruction = AddValidatorToPoolCpi {
        __program: self.instruction.__program,
                  
          stake_pool: self.instruction.stake_pool.expect("stake_pool is not set"),
                  
          staker: self.instruction.staker.expect("staker is not set"),
                  
          funder: self.instruction.funder.expect("funder is not set"),
                  
          stake_pool_withdraw: self.instruction.stake_pool_withdraw.expect("stake_pool_withdraw is not set"),
                  
          validator_list: self.instruction.validator_list.expect("validator_list is not set"),
                  
          stake: self.instruction.stake.expect("stake is not set"),
                  
          validator: self.instruction.validator.expect("validator is not set"),
                  
          rent: self.instruction.rent.expect("rent is not set"),
                  
          clock: self.instruction.clock.expect("clock is not set"),
                  
          sysvar_stake_history: self.instruction.sysvar_stake_history.expect("sysvar_stake_history is not set"),
                  
          stake_config: self.instruction.stake_config.expect("stake_config is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          stake_program: self.instruction.stake_program.expect("stake_program is not set"),
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct AddValidatorToPoolCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            stake_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                staker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                funder: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                stake_pool_withdraw: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                validator_list: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                stake: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                validator: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                clock: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                sysvar_stake_history: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                stake_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                stake_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

