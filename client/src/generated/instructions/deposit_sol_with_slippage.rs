//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct DepositSolWithSlippage {
      
              
          pub stake_pool: solana_program::pubkey::Pubkey,
          
              
          pub withdraw_authority: solana_program::pubkey::Pubkey,
          
              
          pub reserve_stake_account: solana_program::pubkey::Pubkey,
          
              
          pub from_user_lamports: solana_program::pubkey::Pubkey,
          
              
          pub dest_user_pool: solana_program::pubkey::Pubkey,
          
              
          pub manager_fee: solana_program::pubkey::Pubkey,
          
              
          pub referrer_fee: solana_program::pubkey::Pubkey,
          
              
          pub pool_mint: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub token_program: solana_program::pubkey::Pubkey,
      }

impl DepositSolWithSlippage {
  pub fn instruction(&self, args: DepositSolWithSlippageInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: DepositSolWithSlippageInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(10+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.stake_pool,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.withdraw_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve_stake_account,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.from_user_lamports,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.dest_user_pool,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.manager_fee,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.referrer_fee,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&DepositSolWithSlippageInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::SPL_STAKE_POOL_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct DepositSolWithSlippageInstructionData {
            discriminator: u8,
                  }

impl DepositSolWithSlippageInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: 25,
                                              }
  }
}

impl Default for DepositSolWithSlippageInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct DepositSolWithSlippageInstructionArgs {
                  pub lamports_in: u64,
                pub minimum_pool_tokens_out: u64,
      }


/// Instruction builder for `DepositSolWithSlippage`.
///
/// ### Accounts:
///
                ///   0. `[writable]` stake_pool
          ///   1. `[]` withdraw_authority
                ///   2. `[writable]` reserve_stake_account
                ///   3. `[signer]` from_user_lamports
                ///   4. `[writable]` dest_user_pool
                ///   5. `[writable]` manager_fee
                ///   6. `[writable]` referrer_fee
                ///   7. `[writable]` pool_mint
          ///   8. `[]` system_program
          ///   9. `[]` token_program
#[derive(Clone, Debug, Default)]
pub struct DepositSolWithSlippageBuilder {
            stake_pool: Option<solana_program::pubkey::Pubkey>,
                withdraw_authority: Option<solana_program::pubkey::Pubkey>,
                reserve_stake_account: Option<solana_program::pubkey::Pubkey>,
                from_user_lamports: Option<solana_program::pubkey::Pubkey>,
                dest_user_pool: Option<solana_program::pubkey::Pubkey>,
                manager_fee: Option<solana_program::pubkey::Pubkey>,
                referrer_fee: Option<solana_program::pubkey::Pubkey>,
                pool_mint: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                token_program: Option<solana_program::pubkey::Pubkey>,
                        lamports_in: Option<u64>,
                minimum_pool_tokens_out: Option<u64>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl DepositSolWithSlippageBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn stake_pool(&mut self, stake_pool: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.stake_pool = Some(stake_pool);
                    self
    }
            #[inline(always)]
    pub fn withdraw_authority(&mut self, withdraw_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.withdraw_authority = Some(withdraw_authority);
                    self
    }
            #[inline(always)]
    pub fn reserve_stake_account(&mut self, reserve_stake_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.reserve_stake_account = Some(reserve_stake_account);
                    self
    }
            #[inline(always)]
    pub fn from_user_lamports(&mut self, from_user_lamports: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.from_user_lamports = Some(from_user_lamports);
                    self
    }
            #[inline(always)]
    pub fn dest_user_pool(&mut self, dest_user_pool: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.dest_user_pool = Some(dest_user_pool);
                    self
    }
            #[inline(always)]
    pub fn manager_fee(&mut self, manager_fee: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.manager_fee = Some(manager_fee);
                    self
    }
            #[inline(always)]
    pub fn referrer_fee(&mut self, referrer_fee: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.referrer_fee = Some(referrer_fee);
                    self
    }
            #[inline(always)]
    pub fn pool_mint(&mut self, pool_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.pool_mint = Some(pool_mint);
                    self
    }
            #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
                    #[inline(always)]
      pub fn lamports_in(&mut self, lamports_in: u64) -> &mut Self {
        self.lamports_in = Some(lamports_in);
        self
      }
                #[inline(always)]
      pub fn minimum_pool_tokens_out(&mut self, minimum_pool_tokens_out: u64) -> &mut Self {
        self.minimum_pool_tokens_out = Some(minimum_pool_tokens_out);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = DepositSolWithSlippage {
                              stake_pool: self.stake_pool.expect("stake_pool is not set"),
                                        withdraw_authority: self.withdraw_authority.expect("withdraw_authority is not set"),
                                        reserve_stake_account: self.reserve_stake_account.expect("reserve_stake_account is not set"),
                                        from_user_lamports: self.from_user_lamports.expect("from_user_lamports is not set"),
                                        dest_user_pool: self.dest_user_pool.expect("dest_user_pool is not set"),
                                        manager_fee: self.manager_fee.expect("manager_fee is not set"),
                                        referrer_fee: self.referrer_fee.expect("referrer_fee is not set"),
                                        pool_mint: self.pool_mint.expect("pool_mint is not set"),
                                        system_program: self.system_program.expect("system_program is not set"),
                                        token_program: self.token_program.expect("token_program is not set"),
                      };
          let args = DepositSolWithSlippageInstructionArgs {
                                                              lamports_in: self.lamports_in.clone().expect("lamports_in is not set"),
                                                                  minimum_pool_tokens_out: self.minimum_pool_tokens_out.clone().expect("minimum_pool_tokens_out is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `deposit_sol_with_slippage` CPI accounts.
  pub struct DepositSolWithSlippageCpiAccounts<'a, 'b> {
          
                    
              pub stake_pool: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub reserve_stake_account: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub from_user_lamports: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub dest_user_pool: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub manager_fee: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub referrer_fee: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub pool_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `deposit_sol_with_slippage` CPI instruction.
pub struct DepositSolWithSlippageCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub stake_pool: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub reserve_stake_account: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub from_user_lamports: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub dest_user_pool: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub manager_fee: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub referrer_fee: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub pool_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: DepositSolWithSlippageInstructionArgs,
  }

impl<'a, 'b> DepositSolWithSlippageCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: DepositSolWithSlippageCpiAccounts<'a, 'b>,
              args: DepositSolWithSlippageInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              stake_pool: accounts.stake_pool,
              withdraw_authority: accounts.withdraw_authority,
              reserve_stake_account: accounts.reserve_stake_account,
              from_user_lamports: accounts.from_user_lamports,
              dest_user_pool: accounts.dest_user_pool,
              manager_fee: accounts.manager_fee,
              referrer_fee: accounts.referrer_fee,
              pool_mint: accounts.pool_mint,
              system_program: accounts.system_program,
              token_program: accounts.token_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(10+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.stake_pool.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.withdraw_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve_stake_account.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.from_user_lamports.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.dest_user_pool.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.manager_fee.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.referrer_fee.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&DepositSolWithSlippageInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::SPL_STAKE_POOL_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(11 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.stake_pool.clone());
                        account_infos.push(self.withdraw_authority.clone());
                        account_infos.push(self.reserve_stake_account.clone());
                        account_infos.push(self.from_user_lamports.clone());
                        account_infos.push(self.dest_user_pool.clone());
                        account_infos.push(self.manager_fee.clone());
                        account_infos.push(self.referrer_fee.clone());
                        account_infos.push(self.pool_mint.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.token_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `DepositSolWithSlippage` via CPI.
///
/// ### Accounts:
///
                ///   0. `[writable]` stake_pool
          ///   1. `[]` withdraw_authority
                ///   2. `[writable]` reserve_stake_account
                ///   3. `[signer]` from_user_lamports
                ///   4. `[writable]` dest_user_pool
                ///   5. `[writable]` manager_fee
                ///   6. `[writable]` referrer_fee
                ///   7. `[writable]` pool_mint
          ///   8. `[]` system_program
          ///   9. `[]` token_program
#[derive(Clone, Debug)]
pub struct DepositSolWithSlippageCpiBuilder<'a, 'b> {
  instruction: Box<DepositSolWithSlippageCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DepositSolWithSlippageCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(DepositSolWithSlippageCpiBuilderInstruction {
      __program: program,
              stake_pool: None,
              withdraw_authority: None,
              reserve_stake_account: None,
              from_user_lamports: None,
              dest_user_pool: None,
              manager_fee: None,
              referrer_fee: None,
              pool_mint: None,
              system_program: None,
              token_program: None,
                                            lamports_in: None,
                                minimum_pool_tokens_out: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn stake_pool(&mut self, stake_pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.stake_pool = Some(stake_pool);
                    self
    }
      #[inline(always)]
    pub fn withdraw_authority(&mut self, withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.withdraw_authority = Some(withdraw_authority);
                    self
    }
      #[inline(always)]
    pub fn reserve_stake_account(&mut self, reserve_stake_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve_stake_account = Some(reserve_stake_account);
                    self
    }
      #[inline(always)]
    pub fn from_user_lamports(&mut self, from_user_lamports: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.from_user_lamports = Some(from_user_lamports);
                    self
    }
      #[inline(always)]
    pub fn dest_user_pool(&mut self, dest_user_pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.dest_user_pool = Some(dest_user_pool);
                    self
    }
      #[inline(always)]
    pub fn manager_fee(&mut self, manager_fee: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.manager_fee = Some(manager_fee);
                    self
    }
      #[inline(always)]
    pub fn referrer_fee(&mut self, referrer_fee: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.referrer_fee = Some(referrer_fee);
                    self
    }
      #[inline(always)]
    pub fn pool_mint(&mut self, pool_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.pool_mint = Some(pool_mint);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
                    #[inline(always)]
      pub fn lamports_in(&mut self, lamports_in: u64) -> &mut Self {
        self.instruction.lamports_in = Some(lamports_in);
        self
      }
                #[inline(always)]
      pub fn minimum_pool_tokens_out(&mut self, minimum_pool_tokens_out: u64) -> &mut Self {
        self.instruction.minimum_pool_tokens_out = Some(minimum_pool_tokens_out);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = DepositSolWithSlippageInstructionArgs {
                                                              lamports_in: self.instruction.lamports_in.clone().expect("lamports_in is not set"),
                                                                  minimum_pool_tokens_out: self.instruction.minimum_pool_tokens_out.clone().expect("minimum_pool_tokens_out is not set"),
                                    };
        let instruction = DepositSolWithSlippageCpi {
        __program: self.instruction.__program,
                  
          stake_pool: self.instruction.stake_pool.expect("stake_pool is not set"),
                  
          withdraw_authority: self.instruction.withdraw_authority.expect("withdraw_authority is not set"),
                  
          reserve_stake_account: self.instruction.reserve_stake_account.expect("reserve_stake_account is not set"),
                  
          from_user_lamports: self.instruction.from_user_lamports.expect("from_user_lamports is not set"),
                  
          dest_user_pool: self.instruction.dest_user_pool.expect("dest_user_pool is not set"),
                  
          manager_fee: self.instruction.manager_fee.expect("manager_fee is not set"),
                  
          referrer_fee: self.instruction.referrer_fee.expect("referrer_fee is not set"),
                  
          pool_mint: self.instruction.pool_mint.expect("pool_mint is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct DepositSolWithSlippageCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            stake_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                withdraw_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                reserve_stake_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                from_user_lamports: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                dest_user_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                manager_fee: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                referrer_fee: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                pool_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        lamports_in: Option<u64>,
                minimum_pool_tokens_out: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

