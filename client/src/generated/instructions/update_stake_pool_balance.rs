//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct UpdateStakePoolBalance {
      
              
          pub stake_pool: solana_program::pubkey::Pubkey,
          
              
          pub withdraw: solana_program::pubkey::Pubkey,
          
              
          pub validator_list: solana_program::pubkey::Pubkey,
          
              
          pub reserve_stake: solana_program::pubkey::Pubkey,
          
              
          pub manager_fee: solana_program::pubkey::Pubkey,
          
              
          pub pool_mint: solana_program::pubkey::Pubkey,
          
              
          pub token_program: solana_program::pubkey::Pubkey,
      }

impl UpdateStakePoolBalance {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(7+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.stake_pool,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.withdraw,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.validator_list,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.reserve_stake,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.manager_fee,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let data = borsh::to_vec(&UpdateStakePoolBalanceInstructionData::new()).unwrap();
    
    solana_program::instruction::Instruction {
      program_id: crate::SPL_STAKE_POOL_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct UpdateStakePoolBalanceInstructionData {
            discriminator: u8,
      }

impl UpdateStakePoolBalanceInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: 7,
                  }
  }
}

impl Default for UpdateStakePoolBalanceInstructionData {
  fn default() -> Self {
    Self::new()
  }
}



/// Instruction builder for `UpdateStakePoolBalance`.
///
/// ### Accounts:
///
                ///   0. `[writable]` stake_pool
          ///   1. `[]` withdraw
                ///   2. `[writable]` validator_list
          ///   3. `[]` reserve_stake
                ///   4. `[writable]` manager_fee
                ///   5. `[writable]` pool_mint
          ///   6. `[]` token_program
#[derive(Clone, Debug, Default)]
pub struct UpdateStakePoolBalanceBuilder {
            stake_pool: Option<solana_program::pubkey::Pubkey>,
                withdraw: Option<solana_program::pubkey::Pubkey>,
                validator_list: Option<solana_program::pubkey::Pubkey>,
                reserve_stake: Option<solana_program::pubkey::Pubkey>,
                manager_fee: Option<solana_program::pubkey::Pubkey>,
                pool_mint: Option<solana_program::pubkey::Pubkey>,
                token_program: Option<solana_program::pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl UpdateStakePoolBalanceBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn stake_pool(&mut self, stake_pool: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.stake_pool = Some(stake_pool);
                    self
    }
            #[inline(always)]
    pub fn withdraw(&mut self, withdraw: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.withdraw = Some(withdraw);
                    self
    }
            #[inline(always)]
    pub fn validator_list(&mut self, validator_list: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.validator_list = Some(validator_list);
                    self
    }
            #[inline(always)]
    pub fn reserve_stake(&mut self, reserve_stake: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.reserve_stake = Some(reserve_stake);
                    self
    }
            #[inline(always)]
    pub fn manager_fee(&mut self, manager_fee: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.manager_fee = Some(manager_fee);
                    self
    }
            #[inline(always)]
    pub fn pool_mint(&mut self, pool_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.pool_mint = Some(pool_mint);
                    self
    }
            #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = UpdateStakePoolBalance {
                              stake_pool: self.stake_pool.expect("stake_pool is not set"),
                                        withdraw: self.withdraw.expect("withdraw is not set"),
                                        validator_list: self.validator_list.expect("validator_list is not set"),
                                        reserve_stake: self.reserve_stake.expect("reserve_stake is not set"),
                                        manager_fee: self.manager_fee.expect("manager_fee is not set"),
                                        pool_mint: self.pool_mint.expect("pool_mint is not set"),
                                        token_program: self.token_program.expect("token_program is not set"),
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `update_stake_pool_balance` CPI accounts.
  pub struct UpdateStakePoolBalanceCpiAccounts<'a, 'b> {
          
                    
              pub stake_pool: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub withdraw: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub validator_list: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub reserve_stake: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub manager_fee: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub pool_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `update_stake_pool_balance` CPI instruction.
pub struct UpdateStakePoolBalanceCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub stake_pool: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub withdraw: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub validator_list: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub reserve_stake: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub manager_fee: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub pool_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
        }

impl<'a, 'b> UpdateStakePoolBalanceCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: UpdateStakePoolBalanceCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              stake_pool: accounts.stake_pool,
              withdraw: accounts.withdraw,
              validator_list: accounts.validator_list,
              reserve_stake: accounts.reserve_stake,
              manager_fee: accounts.manager_fee,
              pool_mint: accounts.pool_mint,
              token_program: accounts.token_program,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(7+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.stake_pool.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.withdraw.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.validator_list.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.reserve_stake.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.manager_fee.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = borsh::to_vec(&UpdateStakePoolBalanceInstructionData::new()).unwrap();
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::SPL_STAKE_POOL_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.stake_pool.clone());
                        account_infos.push(self.withdraw.clone());
                        account_infos.push(self.validator_list.clone());
                        account_infos.push(self.reserve_stake.clone());
                        account_infos.push(self.manager_fee.clone());
                        account_infos.push(self.pool_mint.clone());
                        account_infos.push(self.token_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `UpdateStakePoolBalance` via CPI.
///
/// ### Accounts:
///
                ///   0. `[writable]` stake_pool
          ///   1. `[]` withdraw
                ///   2. `[writable]` validator_list
          ///   3. `[]` reserve_stake
                ///   4. `[writable]` manager_fee
                ///   5. `[writable]` pool_mint
          ///   6. `[]` token_program
#[derive(Clone, Debug)]
pub struct UpdateStakePoolBalanceCpiBuilder<'a, 'b> {
  instruction: Box<UpdateStakePoolBalanceCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdateStakePoolBalanceCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(UpdateStakePoolBalanceCpiBuilderInstruction {
      __program: program,
              stake_pool: None,
              withdraw: None,
              validator_list: None,
              reserve_stake: None,
              manager_fee: None,
              pool_mint: None,
              token_program: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn stake_pool(&mut self, stake_pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.stake_pool = Some(stake_pool);
                    self
    }
      #[inline(always)]
    pub fn withdraw(&mut self, withdraw: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.withdraw = Some(withdraw);
                    self
    }
      #[inline(always)]
    pub fn validator_list(&mut self, validator_list: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.validator_list = Some(validator_list);
                    self
    }
      #[inline(always)]
    pub fn reserve_stake(&mut self, reserve_stake: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve_stake = Some(reserve_stake);
                    self
    }
      #[inline(always)]
    pub fn manager_fee(&mut self, manager_fee: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.manager_fee = Some(manager_fee);
                    self
    }
      #[inline(always)]
    pub fn pool_mint(&mut self, pool_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.pool_mint = Some(pool_mint);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
        let instruction = UpdateStakePoolBalanceCpi {
        __program: self.instruction.__program,
                  
          stake_pool: self.instruction.stake_pool.expect("stake_pool is not set"),
                  
          withdraw: self.instruction.withdraw.expect("withdraw is not set"),
                  
          validator_list: self.instruction.validator_list.expect("validator_list is not set"),
                  
          reserve_stake: self.instruction.reserve_stake.expect("reserve_stake is not set"),
                  
          manager_fee: self.instruction.manager_fee.expect("manager_fee is not set"),
                  
          pool_mint: self.instruction.pool_mint.expect("pool_mint is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct UpdateStakePoolBalanceCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            stake_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                withdraw: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                validator_list: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                reserve_stake: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                manager_fee: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                pool_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

