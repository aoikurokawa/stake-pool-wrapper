//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct UpdateTokenMetadata {
      
              
          pub stake_pool: solana_program::pubkey::Pubkey,
          
              
          pub manager: solana_program::pubkey::Pubkey,
          
              
          pub withdraw_authority: solana_program::pubkey::Pubkey,
          
              
          pub metadata: solana_program::pubkey::Pubkey,
          
              
          pub mpl_token_metadata_program: solana_program::pubkey::Pubkey,
      }

impl UpdateTokenMetadata {
  pub fn instruction(&self, args: UpdateTokenMetadataInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: UpdateTokenMetadataInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_pool,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.manager,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.withdraw_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.metadata,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mpl_token_metadata_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&UpdateTokenMetadataInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::SPL_STAKE_POOL_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct UpdateTokenMetadataInstructionData {
            discriminator: u8,
                        }

impl UpdateTokenMetadataInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: 18,
                                                            }
  }
}

impl Default for UpdateTokenMetadataInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct UpdateTokenMetadataInstructionArgs {
                  pub name: String,
                pub symbol: String,
                pub uri: String,
      }


/// Instruction builder for `UpdateTokenMetadata`.
///
/// ### Accounts:
///
          ///   0. `[]` stake_pool
                ///   1. `[signer]` manager
          ///   2. `[]` withdraw_authority
                ///   3. `[writable]` metadata
          ///   4. `[]` mpl_token_metadata_program
#[derive(Clone, Debug, Default)]
pub struct UpdateTokenMetadataBuilder {
            stake_pool: Option<solana_program::pubkey::Pubkey>,
                manager: Option<solana_program::pubkey::Pubkey>,
                withdraw_authority: Option<solana_program::pubkey::Pubkey>,
                metadata: Option<solana_program::pubkey::Pubkey>,
                mpl_token_metadata_program: Option<solana_program::pubkey::Pubkey>,
                        name: Option<String>,
                symbol: Option<String>,
                uri: Option<String>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl UpdateTokenMetadataBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn stake_pool(&mut self, stake_pool: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.stake_pool = Some(stake_pool);
                    self
    }
            #[inline(always)]
    pub fn manager(&mut self, manager: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.manager = Some(manager);
                    self
    }
            #[inline(always)]
    pub fn withdraw_authority(&mut self, withdraw_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.withdraw_authority = Some(withdraw_authority);
                    self
    }
            #[inline(always)]
    pub fn metadata(&mut self, metadata: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.metadata = Some(metadata);
                    self
    }
            #[inline(always)]
    pub fn mpl_token_metadata_program(&mut self, mpl_token_metadata_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.mpl_token_metadata_program = Some(mpl_token_metadata_program);
                    self
    }
                    #[inline(always)]
      pub fn name(&mut self, name: String) -> &mut Self {
        self.name = Some(name);
        self
      }
                #[inline(always)]
      pub fn symbol(&mut self, symbol: String) -> &mut Self {
        self.symbol = Some(symbol);
        self
      }
                #[inline(always)]
      pub fn uri(&mut self, uri: String) -> &mut Self {
        self.uri = Some(uri);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = UpdateTokenMetadata {
                              stake_pool: self.stake_pool.expect("stake_pool is not set"),
                                        manager: self.manager.expect("manager is not set"),
                                        withdraw_authority: self.withdraw_authority.expect("withdraw_authority is not set"),
                                        metadata: self.metadata.expect("metadata is not set"),
                                        mpl_token_metadata_program: self.mpl_token_metadata_program.expect("mpl_token_metadata_program is not set"),
                      };
          let args = UpdateTokenMetadataInstructionArgs {
                                                              name: self.name.clone().expect("name is not set"),
                                                                  symbol: self.symbol.clone().expect("symbol is not set"),
                                                                  uri: self.uri.clone().expect("uri is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `update_token_metadata` CPI accounts.
  pub struct UpdateTokenMetadataCpiAccounts<'a, 'b> {
          
                    
              pub stake_pool: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub manager: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub metadata: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub mpl_token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `update_token_metadata` CPI instruction.
pub struct UpdateTokenMetadataCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub stake_pool: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub manager: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub metadata: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub mpl_token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: UpdateTokenMetadataInstructionArgs,
  }

impl<'a, 'b> UpdateTokenMetadataCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: UpdateTokenMetadataCpiAccounts<'a, 'b>,
              args: UpdateTokenMetadataInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              stake_pool: accounts.stake_pool,
              manager: accounts.manager,
              withdraw_authority: accounts.withdraw_authority,
              metadata: accounts.metadata,
              mpl_token_metadata_program: accounts.mpl_token_metadata_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_pool.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.manager.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.withdraw_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.metadata.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mpl_token_metadata_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&UpdateTokenMetadataInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::SPL_STAKE_POOL_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.stake_pool.clone());
                        account_infos.push(self.manager.clone());
                        account_infos.push(self.withdraw_authority.clone());
                        account_infos.push(self.metadata.clone());
                        account_infos.push(self.mpl_token_metadata_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `UpdateTokenMetadata` via CPI.
///
/// ### Accounts:
///
          ///   0. `[]` stake_pool
                ///   1. `[signer]` manager
          ///   2. `[]` withdraw_authority
                ///   3. `[writable]` metadata
          ///   4. `[]` mpl_token_metadata_program
#[derive(Clone, Debug)]
pub struct UpdateTokenMetadataCpiBuilder<'a, 'b> {
  instruction: Box<UpdateTokenMetadataCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdateTokenMetadataCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(UpdateTokenMetadataCpiBuilderInstruction {
      __program: program,
              stake_pool: None,
              manager: None,
              withdraw_authority: None,
              metadata: None,
              mpl_token_metadata_program: None,
                                            name: None,
                                symbol: None,
                                uri: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn stake_pool(&mut self, stake_pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.stake_pool = Some(stake_pool);
                    self
    }
      #[inline(always)]
    pub fn manager(&mut self, manager: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.manager = Some(manager);
                    self
    }
      #[inline(always)]
    pub fn withdraw_authority(&mut self, withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.withdraw_authority = Some(withdraw_authority);
                    self
    }
      #[inline(always)]
    pub fn metadata(&mut self, metadata: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.metadata = Some(metadata);
                    self
    }
      #[inline(always)]
    pub fn mpl_token_metadata_program(&mut self, mpl_token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.mpl_token_metadata_program = Some(mpl_token_metadata_program);
                    self
    }
                    #[inline(always)]
      pub fn name(&mut self, name: String) -> &mut Self {
        self.instruction.name = Some(name);
        self
      }
                #[inline(always)]
      pub fn symbol(&mut self, symbol: String) -> &mut Self {
        self.instruction.symbol = Some(symbol);
        self
      }
                #[inline(always)]
      pub fn uri(&mut self, uri: String) -> &mut Self {
        self.instruction.uri = Some(uri);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = UpdateTokenMetadataInstructionArgs {
                                                              name: self.instruction.name.clone().expect("name is not set"),
                                                                  symbol: self.instruction.symbol.clone().expect("symbol is not set"),
                                                                  uri: self.instruction.uri.clone().expect("uri is not set"),
                                    };
        let instruction = UpdateTokenMetadataCpi {
        __program: self.instruction.__program,
                  
          stake_pool: self.instruction.stake_pool.expect("stake_pool is not set"),
                  
          manager: self.instruction.manager.expect("manager is not set"),
                  
          withdraw_authority: self.instruction.withdraw_authority.expect("withdraw_authority is not set"),
                  
          metadata: self.instruction.metadata.expect("metadata is not set"),
                  
          mpl_token_metadata_program: self.instruction.mpl_token_metadata_program.expect("mpl_token_metadata_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct UpdateTokenMetadataCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            stake_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                manager: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                withdraw_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                mpl_token_metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        name: Option<String>,
                symbol: Option<String>,
                uri: Option<String>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

