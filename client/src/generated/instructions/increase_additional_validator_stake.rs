//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct IncreaseAdditionalValidatorStake {
      
              
          pub stake_pool: solana_program::pubkey::Pubkey,
          
              
          pub staker: solana_program::pubkey::Pubkey,
          
              
          pub withdraw_authority: solana_program::pubkey::Pubkey,
          
              
          pub validator_list: solana_program::pubkey::Pubkey,
          
              
          pub reserve_stake_account: solana_program::pubkey::Pubkey,
          
              
          pub ephemeral_stake_account: solana_program::pubkey::Pubkey,
          
              
          pub transient_stake_account: solana_program::pubkey::Pubkey,
          
              
          pub validator_stake_account: solana_program::pubkey::Pubkey,
          
              
          pub validator_vote_account: solana_program::pubkey::Pubkey,
          
              
          pub clock: solana_program::pubkey::Pubkey,
          
              
          pub stake_history: solana_program::pubkey::Pubkey,
          
              
          pub stake_config: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub stake_program: solana_program::pubkey::Pubkey,
      }

impl IncreaseAdditionalValidatorStake {
  pub fn instruction(&self, args: IncreaseAdditionalValidatorStakeInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: IncreaseAdditionalValidatorStakeInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(14+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_pool,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.staker,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.withdraw_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.validator_list,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve_stake_account,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.ephemeral_stake_account,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.transient_stake_account,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.validator_stake_account,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.validator_vote_account,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.clock,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_history,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_config,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&IncreaseAdditionalValidatorStakeInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::SPL_STAKE_POOL_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct IncreaseAdditionalValidatorStakeInstructionData {
            discriminator: u8,
                        }

impl IncreaseAdditionalValidatorStakeInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: 19,
                                                            }
  }
}

impl Default for IncreaseAdditionalValidatorStakeInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct IncreaseAdditionalValidatorStakeInstructionArgs {
                  pub lamports: u64,
                pub transient_stake_seed: u64,
                pub ephemeral_stake_seed: u64,
      }


/// Instruction builder for `IncreaseAdditionalValidatorStake`.
///
/// ### Accounts:
///
          ///   0. `[]` stake_pool
                ///   1. `[writable]` staker
          ///   2. `[]` withdraw_authority
                ///   3. `[writable]` validator_list
                ///   4. `[writable]` reserve_stake_account
                ///   5. `[writable]` ephemeral_stake_account
                ///   6. `[writable]` transient_stake_account
          ///   7. `[]` validator_stake_account
          ///   8. `[]` validator_vote_account
          ///   9. `[]` clock
          ///   10. `[]` stake_history
          ///   11. `[]` stake_config
          ///   12. `[]` system_program
          ///   13. `[]` stake_program
#[derive(Clone, Debug, Default)]
pub struct IncreaseAdditionalValidatorStakeBuilder {
            stake_pool: Option<solana_program::pubkey::Pubkey>,
                staker: Option<solana_program::pubkey::Pubkey>,
                withdraw_authority: Option<solana_program::pubkey::Pubkey>,
                validator_list: Option<solana_program::pubkey::Pubkey>,
                reserve_stake_account: Option<solana_program::pubkey::Pubkey>,
                ephemeral_stake_account: Option<solana_program::pubkey::Pubkey>,
                transient_stake_account: Option<solana_program::pubkey::Pubkey>,
                validator_stake_account: Option<solana_program::pubkey::Pubkey>,
                validator_vote_account: Option<solana_program::pubkey::Pubkey>,
                clock: Option<solana_program::pubkey::Pubkey>,
                stake_history: Option<solana_program::pubkey::Pubkey>,
                stake_config: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                stake_program: Option<solana_program::pubkey::Pubkey>,
                        lamports: Option<u64>,
                transient_stake_seed: Option<u64>,
                ephemeral_stake_seed: Option<u64>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl IncreaseAdditionalValidatorStakeBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn stake_pool(&mut self, stake_pool: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.stake_pool = Some(stake_pool);
                    self
    }
            #[inline(always)]
    pub fn staker(&mut self, staker: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.staker = Some(staker);
                    self
    }
            #[inline(always)]
    pub fn withdraw_authority(&mut self, withdraw_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.withdraw_authority = Some(withdraw_authority);
                    self
    }
            #[inline(always)]
    pub fn validator_list(&mut self, validator_list: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.validator_list = Some(validator_list);
                    self
    }
            #[inline(always)]
    pub fn reserve_stake_account(&mut self, reserve_stake_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.reserve_stake_account = Some(reserve_stake_account);
                    self
    }
            #[inline(always)]
    pub fn ephemeral_stake_account(&mut self, ephemeral_stake_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.ephemeral_stake_account = Some(ephemeral_stake_account);
                    self
    }
            #[inline(always)]
    pub fn transient_stake_account(&mut self, transient_stake_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.transient_stake_account = Some(transient_stake_account);
                    self
    }
            #[inline(always)]
    pub fn validator_stake_account(&mut self, validator_stake_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.validator_stake_account = Some(validator_stake_account);
                    self
    }
            #[inline(always)]
    pub fn validator_vote_account(&mut self, validator_vote_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.validator_vote_account = Some(validator_vote_account);
                    self
    }
            #[inline(always)]
    pub fn clock(&mut self, clock: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.clock = Some(clock);
                    self
    }
            #[inline(always)]
    pub fn stake_history(&mut self, stake_history: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.stake_history = Some(stake_history);
                    self
    }
            #[inline(always)]
    pub fn stake_config(&mut self, stake_config: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.stake_config = Some(stake_config);
                    self
    }
            #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            #[inline(always)]
    pub fn stake_program(&mut self, stake_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.stake_program = Some(stake_program);
                    self
    }
                    #[inline(always)]
      pub fn lamports(&mut self, lamports: u64) -> &mut Self {
        self.lamports = Some(lamports);
        self
      }
                #[inline(always)]
      pub fn transient_stake_seed(&mut self, transient_stake_seed: u64) -> &mut Self {
        self.transient_stake_seed = Some(transient_stake_seed);
        self
      }
                #[inline(always)]
      pub fn ephemeral_stake_seed(&mut self, ephemeral_stake_seed: u64) -> &mut Self {
        self.ephemeral_stake_seed = Some(ephemeral_stake_seed);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = IncreaseAdditionalValidatorStake {
                              stake_pool: self.stake_pool.expect("stake_pool is not set"),
                                        staker: self.staker.expect("staker is not set"),
                                        withdraw_authority: self.withdraw_authority.expect("withdraw_authority is not set"),
                                        validator_list: self.validator_list.expect("validator_list is not set"),
                                        reserve_stake_account: self.reserve_stake_account.expect("reserve_stake_account is not set"),
                                        ephemeral_stake_account: self.ephemeral_stake_account.expect("ephemeral_stake_account is not set"),
                                        transient_stake_account: self.transient_stake_account.expect("transient_stake_account is not set"),
                                        validator_stake_account: self.validator_stake_account.expect("validator_stake_account is not set"),
                                        validator_vote_account: self.validator_vote_account.expect("validator_vote_account is not set"),
                                        clock: self.clock.expect("clock is not set"),
                                        stake_history: self.stake_history.expect("stake_history is not set"),
                                        stake_config: self.stake_config.expect("stake_config is not set"),
                                        system_program: self.system_program.expect("system_program is not set"),
                                        stake_program: self.stake_program.expect("stake_program is not set"),
                      };
          let args = IncreaseAdditionalValidatorStakeInstructionArgs {
                                                              lamports: self.lamports.clone().expect("lamports is not set"),
                                                                  transient_stake_seed: self.transient_stake_seed.clone().expect("transient_stake_seed is not set"),
                                                                  ephemeral_stake_seed: self.ephemeral_stake_seed.clone().expect("ephemeral_stake_seed is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `increase_additional_validator_stake` CPI accounts.
  pub struct IncreaseAdditionalValidatorStakeCpiAccounts<'a, 'b> {
          
                    
              pub stake_pool: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub staker: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub validator_list: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub reserve_stake_account: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub ephemeral_stake_account: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub transient_stake_account: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub validator_stake_account: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub validator_vote_account: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub clock: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub stake_history: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub stake_config: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub stake_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `increase_additional_validator_stake` CPI instruction.
pub struct IncreaseAdditionalValidatorStakeCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub stake_pool: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub staker: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub validator_list: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub reserve_stake_account: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub ephemeral_stake_account: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub transient_stake_account: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub validator_stake_account: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub validator_vote_account: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub clock: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub stake_history: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub stake_config: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub stake_program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: IncreaseAdditionalValidatorStakeInstructionArgs,
  }

impl<'a, 'b> IncreaseAdditionalValidatorStakeCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: IncreaseAdditionalValidatorStakeCpiAccounts<'a, 'b>,
              args: IncreaseAdditionalValidatorStakeInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              stake_pool: accounts.stake_pool,
              staker: accounts.staker,
              withdraw_authority: accounts.withdraw_authority,
              validator_list: accounts.validator_list,
              reserve_stake_account: accounts.reserve_stake_account,
              ephemeral_stake_account: accounts.ephemeral_stake_account,
              transient_stake_account: accounts.transient_stake_account,
              validator_stake_account: accounts.validator_stake_account,
              validator_vote_account: accounts.validator_vote_account,
              clock: accounts.clock,
              stake_history: accounts.stake_history,
              stake_config: accounts.stake_config,
              system_program: accounts.system_program,
              stake_program: accounts.stake_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(14+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_pool.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.staker.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.withdraw_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.validator_list.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve_stake_account.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.ephemeral_stake_account.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.transient_stake_account.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.validator_stake_account.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.validator_vote_account.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.clock.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_history.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_config.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&IncreaseAdditionalValidatorStakeInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::SPL_STAKE_POOL_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(15 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.stake_pool.clone());
                        account_infos.push(self.staker.clone());
                        account_infos.push(self.withdraw_authority.clone());
                        account_infos.push(self.validator_list.clone());
                        account_infos.push(self.reserve_stake_account.clone());
                        account_infos.push(self.ephemeral_stake_account.clone());
                        account_infos.push(self.transient_stake_account.clone());
                        account_infos.push(self.validator_stake_account.clone());
                        account_infos.push(self.validator_vote_account.clone());
                        account_infos.push(self.clock.clone());
                        account_infos.push(self.stake_history.clone());
                        account_infos.push(self.stake_config.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.stake_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `IncreaseAdditionalValidatorStake` via CPI.
///
/// ### Accounts:
///
          ///   0. `[]` stake_pool
                ///   1. `[writable]` staker
          ///   2. `[]` withdraw_authority
                ///   3. `[writable]` validator_list
                ///   4. `[writable]` reserve_stake_account
                ///   5. `[writable]` ephemeral_stake_account
                ///   6. `[writable]` transient_stake_account
          ///   7. `[]` validator_stake_account
          ///   8. `[]` validator_vote_account
          ///   9. `[]` clock
          ///   10. `[]` stake_history
          ///   11. `[]` stake_config
          ///   12. `[]` system_program
          ///   13. `[]` stake_program
#[derive(Clone, Debug)]
pub struct IncreaseAdditionalValidatorStakeCpiBuilder<'a, 'b> {
  instruction: Box<IncreaseAdditionalValidatorStakeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> IncreaseAdditionalValidatorStakeCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(IncreaseAdditionalValidatorStakeCpiBuilderInstruction {
      __program: program,
              stake_pool: None,
              staker: None,
              withdraw_authority: None,
              validator_list: None,
              reserve_stake_account: None,
              ephemeral_stake_account: None,
              transient_stake_account: None,
              validator_stake_account: None,
              validator_vote_account: None,
              clock: None,
              stake_history: None,
              stake_config: None,
              system_program: None,
              stake_program: None,
                                            lamports: None,
                                transient_stake_seed: None,
                                ephemeral_stake_seed: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn stake_pool(&mut self, stake_pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.stake_pool = Some(stake_pool);
                    self
    }
      #[inline(always)]
    pub fn staker(&mut self, staker: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.staker = Some(staker);
                    self
    }
      #[inline(always)]
    pub fn withdraw_authority(&mut self, withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.withdraw_authority = Some(withdraw_authority);
                    self
    }
      #[inline(always)]
    pub fn validator_list(&mut self, validator_list: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.validator_list = Some(validator_list);
                    self
    }
      #[inline(always)]
    pub fn reserve_stake_account(&mut self, reserve_stake_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve_stake_account = Some(reserve_stake_account);
                    self
    }
      #[inline(always)]
    pub fn ephemeral_stake_account(&mut self, ephemeral_stake_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.ephemeral_stake_account = Some(ephemeral_stake_account);
                    self
    }
      #[inline(always)]
    pub fn transient_stake_account(&mut self, transient_stake_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.transient_stake_account = Some(transient_stake_account);
                    self
    }
      #[inline(always)]
    pub fn validator_stake_account(&mut self, validator_stake_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.validator_stake_account = Some(validator_stake_account);
                    self
    }
      #[inline(always)]
    pub fn validator_vote_account(&mut self, validator_vote_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.validator_vote_account = Some(validator_vote_account);
                    self
    }
      #[inline(always)]
    pub fn clock(&mut self, clock: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.clock = Some(clock);
                    self
    }
      #[inline(always)]
    pub fn stake_history(&mut self, stake_history: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.stake_history = Some(stake_history);
                    self
    }
      #[inline(always)]
    pub fn stake_config(&mut self, stake_config: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.stake_config = Some(stake_config);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn stake_program(&mut self, stake_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.stake_program = Some(stake_program);
                    self
    }
                    #[inline(always)]
      pub fn lamports(&mut self, lamports: u64) -> &mut Self {
        self.instruction.lamports = Some(lamports);
        self
      }
                #[inline(always)]
      pub fn transient_stake_seed(&mut self, transient_stake_seed: u64) -> &mut Self {
        self.instruction.transient_stake_seed = Some(transient_stake_seed);
        self
      }
                #[inline(always)]
      pub fn ephemeral_stake_seed(&mut self, ephemeral_stake_seed: u64) -> &mut Self {
        self.instruction.ephemeral_stake_seed = Some(ephemeral_stake_seed);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = IncreaseAdditionalValidatorStakeInstructionArgs {
                                                              lamports: self.instruction.lamports.clone().expect("lamports is not set"),
                                                                  transient_stake_seed: self.instruction.transient_stake_seed.clone().expect("transient_stake_seed is not set"),
                                                                  ephemeral_stake_seed: self.instruction.ephemeral_stake_seed.clone().expect("ephemeral_stake_seed is not set"),
                                    };
        let instruction = IncreaseAdditionalValidatorStakeCpi {
        __program: self.instruction.__program,
                  
          stake_pool: self.instruction.stake_pool.expect("stake_pool is not set"),
                  
          staker: self.instruction.staker.expect("staker is not set"),
                  
          withdraw_authority: self.instruction.withdraw_authority.expect("withdraw_authority is not set"),
                  
          validator_list: self.instruction.validator_list.expect("validator_list is not set"),
                  
          reserve_stake_account: self.instruction.reserve_stake_account.expect("reserve_stake_account is not set"),
                  
          ephemeral_stake_account: self.instruction.ephemeral_stake_account.expect("ephemeral_stake_account is not set"),
                  
          transient_stake_account: self.instruction.transient_stake_account.expect("transient_stake_account is not set"),
                  
          validator_stake_account: self.instruction.validator_stake_account.expect("validator_stake_account is not set"),
                  
          validator_vote_account: self.instruction.validator_vote_account.expect("validator_vote_account is not set"),
                  
          clock: self.instruction.clock.expect("clock is not set"),
                  
          stake_history: self.instruction.stake_history.expect("stake_history is not set"),
                  
          stake_config: self.instruction.stake_config.expect("stake_config is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          stake_program: self.instruction.stake_program.expect("stake_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct IncreaseAdditionalValidatorStakeCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            stake_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                staker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                withdraw_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                validator_list: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                reserve_stake_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                ephemeral_stake_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                transient_stake_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                validator_stake_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                validator_vote_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                clock: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                stake_history: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                stake_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                stake_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        lamports: Option<u64>,
                transient_stake_seed: Option<u64>,
                ephemeral_stake_seed: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

