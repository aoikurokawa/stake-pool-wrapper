//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum SplStakePoolError {
    /// 0 - AlreadyInUse
    #[error("AlreadyInUse")]
    AlreadyInUse = 0x0,
    /// 1 - InvalidProgramAddress
    #[error("InvalidProgramAddress")]
    InvalidProgramAddress = 0x1,
    /// 2 - InvalidState
    #[error("InvalidState")]
    InvalidState = 0x2,
    /// 3 - CalculationFailure
    #[error("CalculationFailure")]
    CalculationFailure = 0x3,
    /// 4 - FeeTooHigh
    #[error("FeeTooHigh")]
    FeeTooHigh = 0x4,
    /// 5 - WrongAccountMint
    #[error("WrongAccountMint")]
    WrongAccountMint = 0x5,
    /// 6 - WrongManager
    #[error("WrongManager")]
    WrongManager = 0x6,
    /// 7 - SignatureMissing
    #[error("SignatureMissing")]
    SignatureMissing = 0x7,
    /// 8 - InvalidValidatorStakeList
    #[error("InvalidValidatorStakeList")]
    InvalidValidatorStakeList = 0x8,
    /// 9 - InvalidFeeAccount
    #[error("InvalidFeeAccount")]
    InvalidFeeAccount = 0x9,
    /// 10 - WrongPoolMint
    #[error("WrongPoolMint")]
    WrongPoolMint = 0xA,
    /// 11 - WrongStakeStake
    #[error("WrongStakeStake")]
    WrongStakeStake = 0xB,
    /// 12 - UserStakeNotActive
    #[error("UserStakeNotActive")]
    UserStakeNotActive = 0xC,
    /// 13 - ValidatorAlreadyAdded
    #[error("ValidatorAlreadyAdded")]
    ValidatorAlreadyAdded = 0xD,
    /// 14 - ValidatorNotFound
    #[error("ValidatorNotFound")]
    ValidatorNotFound = 0xE,
    /// 15 - InvalidStakeAccountAddress
    #[error("InvalidStakeAccountAddress")]
    InvalidStakeAccountAddress = 0xF,
    /// 16 - StakeListOutOfDate
    #[error("StakeListOutOfDate")]
    StakeListOutOfDate = 0x10,
    /// 17 - StakeListAndPoolOutOfDate
    #[error("StakeListAndPoolOutOfDate")]
    StakeListAndPoolOutOfDate = 0x11,
    /// 18 - UnknownValidatorStakeAccount
    #[error("UnknownValidatorStakeAccount")]
    UnknownValidatorStakeAccount = 0x12,
    /// 19 - WrongMintingAuthority
    #[error("WrongMintingAuthority")]
    WrongMintingAuthority = 0x13,
    /// 20 - UnexpectedValidatorListAccountSize
    #[error("UnexpectedValidatorListAccountSize")]
    UnexpectedValidatorListAccountSize = 0x14,
    /// 21 - WrongStaker
    #[error("WrongStaker")]
    WrongStaker = 0x15,
    /// 22 - NonZeroPoolTokenSupply
    #[error("NonZeroPoolTokenSupply")]
    NonZeroPoolTokenSupply = 0x16,
    /// 23 - StakeLamportsNotEqualToMinimum
    #[error("StakeLamportsNotEqualToMinimum")]
    StakeLamportsNotEqualToMinimum = 0x17,
    /// 24 - IncorrectDepositVoteAddress
    #[error("IncorrectDepositVoteAddress")]
    IncorrectDepositVoteAddress = 0x18,
    /// 25 - IncorrectWithdrawVoteAddress
    #[error("IncorrectWithdrawVoteAddress")]
    IncorrectWithdrawVoteAddress = 0x19,
    /// 26 - InvalidMintFreezeAuthority
    #[error("InvalidMintFreezeAuthority")]
    InvalidMintFreezeAuthority = 0x1A,
    /// 27 - FeeIncreaseTooHigh
    #[error("FeeIncreaseTooHigh")]
    FeeIncreaseTooHigh = 0x1B,
    /// 28 - WithdrawalTooSmall
    #[error("WithdrawalTooSmall")]
    WithdrawalTooSmall = 0x1C,
    /// 29 - DepositTooSmall
    #[error("DepositTooSmall")]
    DepositTooSmall = 0x1D,
    /// 30 - InvalidStakeDepositAuthority
    #[error("InvalidStakeDepositAuthority")]
    InvalidStakeDepositAuthority = 0x1E,
    /// 31 - InvalidSolDepositAuthority
    #[error("InvalidSolDepositAuthority")]
    InvalidSolDepositAuthority = 0x1F,
    /// 32 - InvalidPreferredValidator
    #[error("InvalidPreferredValidator")]
    InvalidPreferredValidator = 0x20,
    /// 33 - TransientAccountInUse
    #[error("TransientAccountInUse")]
    TransientAccountInUse = 0x21,
    /// 34 - InvalidSolWithdrawAuthority
    #[error("InvalidSolWithdrawAuthority")]
    InvalidSolWithdrawAuthority = 0x22,
    /// 35 - SolWithdrawalTooLarge
    #[error("SolWithdrawalTooLarge")]
    SolWithdrawalTooLarge = 0x23,
    /// 36 - InvalidMetadataAccount
    #[error("InvalidMetadataAccount")]
    InvalidMetadataAccount = 0x24,
    /// 37 - UnsupportedMintExtension
    #[error("UnsupportedMintExtension")]
    UnsupportedMintExtension = 0x25,
    /// 38 - UnsupportedFeeAccountExtension
    #[error("UnsupportedFeeAccountExtension")]
    UnsupportedFeeAccountExtension = 0x26,
    /// 39 - Instruction exceeds desired slippage limit
    #[error("Instruction exceeds desired slippage limit")]
    ExceededSlippage = 0x27,
    /// 40 - IncorrectMintDecimals
    #[error("IncorrectMintDecimals")]
    IncorrectMintDecimals = 0x28,
    /// 41 - ReserveDepleted
    #[error("ReserveDepleted")]
    ReserveDepleted = 0x29,
    /// 42 - Missing required sysvar account
    #[error("Missing required sysvar account")]
    MissingRequiredSysvar = 0x2A,
}

impl solana_program::program_error::PrintProgramError for SplStakePoolError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for SplStakePoolError {
    fn type_of() -> &'static str {
        "SplStakePoolError"
    }
}

