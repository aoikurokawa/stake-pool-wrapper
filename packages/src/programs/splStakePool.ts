/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAddValidatorToPoolInstruction,
  type ParsedCleanupRemovedValidatorEntriesInstruction,
  type ParsedCreateTokenMetadataInstruction,
  type ParsedDecreaseAdditionalValidatorStakeInstruction,
  type ParsedDecreaseValidatorStakeInstruction,
  type ParsedDecreaseValidatorStakeWithReserveInstruction,
  type ParsedDepositSolInstruction,
  type ParsedDepositSolWithSlippageInstruction,
  type ParsedDepositStakeInstruction,
  type ParsedDepositStakeWithSlippageInstruction,
  type ParsedIncreaseAdditionalValidatorStakeInstruction,
  type ParsedIncreaseValidatorStakeInstruction,
  type ParsedInitializeInstruction,
  type ParsedRedelegateInstruction,
  type ParsedRemoveValidatorFromPoolInstruction,
  type ParsedSetFeeInstruction,
  type ParsedSetFundingAuthorityInstruction,
  type ParsedSetManagerInstruction,
  type ParsedSetPreferredValidatorInstruction,
  type ParsedSetStakerInstruction,
  type ParsedUpdateStakePoolBalanceInstruction,
  type ParsedUpdateTokenMetadataInstruction,
  type ParsedUpdateValidatorListBalanceInstruction,
  type ParsedWithdrawSolInstruction,
  type ParsedWithdrawSolWithSlippageInstruction,
  type ParsedWithdrawStakeInstruction,
  type ParsedWithdrawStakeWithSlippageInstruction,
} from '../instructions';

export const SPL_STAKE_POOL_PROGRAM_ADDRESS =
  'DPoo15wWDqpPJJtS2MUZ49aRxqz5ZaaJCJP4z8bLuib' as Address<'DPoo15wWDqpPJJtS2MUZ49aRxqz5ZaaJCJP4z8bLuib'>;

export enum SplStakePoolAccount {
  StakePool,
  ValidatorList,
  ValidatorStakeInfo,
}

export enum SplStakePoolInstruction {
  Initialize,
  AddValidatorToPool,
  RemoveValidatorFromPool,
  DecreaseValidatorStake,
  IncreaseValidatorStake,
  SetPreferredValidator,
  UpdateValidatorListBalance,
  UpdateStakePoolBalance,
  CleanupRemovedValidatorEntries,
  DepositStake,
  WithdrawStake,
  SetManager,
  SetFee,
  SetStaker,
  DepositSol,
  SetFundingAuthority,
  WithdrawSol,
  CreateTokenMetadata,
  UpdateTokenMetadata,
  IncreaseAdditionalValidatorStake,
  DecreaseAdditionalValidatorStake,
  DecreaseValidatorStakeWithReserve,
  Redelegate,
  DepositStakeWithSlippage,
  WithdrawStakeWithSlippage,
  DepositSolWithSlippage,
  WithdrawSolWithSlippage,
}

export function identifySplStakePoolInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SplStakePoolInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return SplStakePoolInstruction.Initialize;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return SplStakePoolInstruction.AddValidatorToPool;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return SplStakePoolInstruction.RemoveValidatorFromPool;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return SplStakePoolInstruction.DecreaseValidatorStake;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return SplStakePoolInstruction.IncreaseValidatorStake;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return SplStakePoolInstruction.SetPreferredValidator;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return SplStakePoolInstruction.UpdateValidatorListBalance;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return SplStakePoolInstruction.UpdateStakePoolBalance;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return SplStakePoolInstruction.CleanupRemovedValidatorEntries;
  }
  if (containsBytes(data, getU8Encoder().encode(9), 0)) {
    return SplStakePoolInstruction.DepositStake;
  }
  if (containsBytes(data, getU8Encoder().encode(10), 0)) {
    return SplStakePoolInstruction.WithdrawStake;
  }
  if (containsBytes(data, getU8Encoder().encode(11), 0)) {
    return SplStakePoolInstruction.SetManager;
  }
  if (containsBytes(data, getU8Encoder().encode(12), 0)) {
    return SplStakePoolInstruction.SetFee;
  }
  if (containsBytes(data, getU8Encoder().encode(13), 0)) {
    return SplStakePoolInstruction.SetStaker;
  }
  if (containsBytes(data, getU8Encoder().encode(14), 0)) {
    return SplStakePoolInstruction.DepositSol;
  }
  if (containsBytes(data, getU8Encoder().encode(15), 0)) {
    return SplStakePoolInstruction.SetFundingAuthority;
  }
  if (containsBytes(data, getU8Encoder().encode(16), 0)) {
    return SplStakePoolInstruction.WithdrawSol;
  }
  if (containsBytes(data, getU8Encoder().encode(17), 0)) {
    return SplStakePoolInstruction.CreateTokenMetadata;
  }
  if (containsBytes(data, getU8Encoder().encode(18), 0)) {
    return SplStakePoolInstruction.UpdateTokenMetadata;
  }
  if (containsBytes(data, getU8Encoder().encode(19), 0)) {
    return SplStakePoolInstruction.IncreaseAdditionalValidatorStake;
  }
  if (containsBytes(data, getU8Encoder().encode(20), 0)) {
    return SplStakePoolInstruction.DecreaseAdditionalValidatorStake;
  }
  if (containsBytes(data, getU8Encoder().encode(21), 0)) {
    return SplStakePoolInstruction.DecreaseValidatorStakeWithReserve;
  }
  if (containsBytes(data, getU8Encoder().encode(22), 0)) {
    return SplStakePoolInstruction.Redelegate;
  }
  if (containsBytes(data, getU8Encoder().encode(23), 0)) {
    return SplStakePoolInstruction.DepositStakeWithSlippage;
  }
  if (containsBytes(data, getU8Encoder().encode(24), 0)) {
    return SplStakePoolInstruction.WithdrawStakeWithSlippage;
  }
  if (containsBytes(data, getU8Encoder().encode(25), 0)) {
    return SplStakePoolInstruction.DepositSolWithSlippage;
  }
  if (containsBytes(data, getU8Encoder().encode(26), 0)) {
    return SplStakePoolInstruction.WithdrawSolWithSlippage;
  }
  throw new Error(
    'The provided instruction could not be identified as a splStakePool instruction.'
  );
}

export type ParsedSplStakePoolInstruction<
  TProgram extends string = 'DPoo15wWDqpPJJtS2MUZ49aRxqz5ZaaJCJP4z8bLuib',
> =
  | ({
      instructionType: SplStakePoolInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.AddValidatorToPool;
    } & ParsedAddValidatorToPoolInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.RemoveValidatorFromPool;
    } & ParsedRemoveValidatorFromPoolInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.DecreaseValidatorStake;
    } & ParsedDecreaseValidatorStakeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.IncreaseValidatorStake;
    } & ParsedIncreaseValidatorStakeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.SetPreferredValidator;
    } & ParsedSetPreferredValidatorInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.UpdateValidatorListBalance;
    } & ParsedUpdateValidatorListBalanceInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.UpdateStakePoolBalance;
    } & ParsedUpdateStakePoolBalanceInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.CleanupRemovedValidatorEntries;
    } & ParsedCleanupRemovedValidatorEntriesInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.DepositStake;
    } & ParsedDepositStakeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.WithdrawStake;
    } & ParsedWithdrawStakeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.SetManager;
    } & ParsedSetManagerInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.SetFee;
    } & ParsedSetFeeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.SetStaker;
    } & ParsedSetStakerInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.DepositSol;
    } & ParsedDepositSolInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.SetFundingAuthority;
    } & ParsedSetFundingAuthorityInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.WithdrawSol;
    } & ParsedWithdrawSolInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.CreateTokenMetadata;
    } & ParsedCreateTokenMetadataInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.UpdateTokenMetadata;
    } & ParsedUpdateTokenMetadataInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.IncreaseAdditionalValidatorStake;
    } & ParsedIncreaseAdditionalValidatorStakeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.DecreaseAdditionalValidatorStake;
    } & ParsedDecreaseAdditionalValidatorStakeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.DecreaseValidatorStakeWithReserve;
    } & ParsedDecreaseValidatorStakeWithReserveInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.Redelegate;
    } & ParsedRedelegateInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.DepositStakeWithSlippage;
    } & ParsedDepositStakeWithSlippageInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.WithdrawStakeWithSlippage;
    } & ParsedWithdrawStakeWithSlippageInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.DepositSolWithSlippage;
    } & ParsedDepositSolWithSlippageInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.WithdrawSolWithSlippage;
    } & ParsedWithdrawSolWithSlippageInstruction<TProgram>);
