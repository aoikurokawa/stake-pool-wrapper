/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAddValidatorToPoolInstruction,
  type ParsedCleanupRemovedValidatorEntriesInstruction,
  type ParsedCreateTokenMetadataInstruction,
  type ParsedDecreaseValidatorStakeInstruction,
  type ParsedDepositSolInstruction,
  type ParsedDepositStakeInstruction,
  type ParsedIncreaseValidatorStakeInstruction,
  type ParsedInitializeInstruction,
  type ParsedRemoveValidatorFromPoolInstruction,
  type ParsedSetFeeInstruction,
  type ParsedSetFundingAuthorityInstruction,
  type ParsedSetManagerInstruction,
  type ParsedSetPreferredValidatorInstruction,
  type ParsedSetStakerInstruction,
  type ParsedUpdateStakePoolBalanceInstruction,
  type ParsedUpdateTokenMetadataInstruction,
  type ParsedUpdateValidatorListBalanceInstruction,
  type ParsedWithdrawSolInstruction,
  type ParsedWithdrawStakeInstruction,
} from '../instructions';

export const SPL_STAKE_POOL_PROGRAM_ADDRESS = '' as Address<''>;

export enum SplStakePoolAccount {
  StakePool,
  ValidatorStakeInfo,
  ValidatorList,
}

export function identifySplStakePoolAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SplStakePoolAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([121, 34, 206, 21, 79, 127, 255, 28])
      ),
      0
    )
  ) {
    return SplStakePoolAccount.StakePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([199, 238, 148, 182, 193, 141, 114, 26])
      ),
      0
    )
  ) {
    return SplStakePoolAccount.ValidatorStakeInfo;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([131, 181, 125, 127, 46, 36, 40, 167])
      ),
      0
    )
  ) {
    return SplStakePoolAccount.ValidatorList;
  }
  throw new Error(
    'The provided account could not be identified as a splStakePool account.'
  );
}

export enum SplStakePoolInstruction {
  Initialize,
  AddValidatorToPool,
  RemoveValidatorFromPool,
  DecreaseValidatorStake,
  IncreaseValidatorStake,
  SetPreferredValidator,
  UpdateValidatorListBalance,
  UpdateStakePoolBalance,
  CleanupRemovedValidatorEntries,
  DepositStake,
  WithdrawStake,
  SetManager,
  SetFee,
  SetStaker,
  DepositSol,
  SetFundingAuthority,
  WithdrawSol,
  CreateTokenMetadata,
  UpdateTokenMetadata,
}

export function identifySplStakePoolInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SplStakePoolInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([181, 6, 29, 25, 192, 211, 190, 187])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.AddValidatorToPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([161, 32, 213, 239, 221, 15, 181, 114])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.RemoveValidatorFromPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([145, 203, 107, 123, 71, 63, 35, 225])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.DecreaseValidatorStake;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([5, 121, 50, 243, 14, 159, 97, 6])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.IncreaseValidatorStake;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([114, 42, 19, 98, 212, 97, 109, 13])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.SetPreferredValidator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([98, 93, 78, 124, 109, 4, 165, 194])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.UpdateValidatorListBalance;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([238, 181, 59, 245, 177, 236, 231, 88])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.UpdateStakePoolBalance;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([211, 101, 162, 27, 244, 149, 45, 88])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.CleanupRemovedValidatorEntries;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([160, 167, 9, 220, 74, 243, 228, 43])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.DepositStake;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([153, 8, 22, 138, 105, 176, 87, 66])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.WithdrawStake;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([30, 197, 171, 92, 121, 184, 151, 165])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.SetManager;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([18, 154, 24, 18, 237, 214, 19, 80])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.SetFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 203, 114, 28, 80, 138, 17, 131])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.SetStaker;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([108, 81, 78, 117, 125, 155, 56, 200])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.DepositSol;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([48, 2, 114, 83, 165, 222, 71, 233])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.SetFundingAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([145, 131, 74, 136, 65, 137, 42, 38])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.WithdrawSol;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([221, 80, 176, 37, 153, 188, 160, 68])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.CreateTokenMetadata;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([243, 6, 8, 23, 126, 181, 251, 158])
      ),
      0
    )
  ) {
    return SplStakePoolInstruction.UpdateTokenMetadata;
  }
  throw new Error(
    'The provided instruction could not be identified as a splStakePool instruction.'
  );
}

export type ParsedSplStakePoolInstruction<TProgram extends string = ''> =
  | ({
      instructionType: SplStakePoolInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.AddValidatorToPool;
    } & ParsedAddValidatorToPoolInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.RemoveValidatorFromPool;
    } & ParsedRemoveValidatorFromPoolInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.DecreaseValidatorStake;
    } & ParsedDecreaseValidatorStakeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.IncreaseValidatorStake;
    } & ParsedIncreaseValidatorStakeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.SetPreferredValidator;
    } & ParsedSetPreferredValidatorInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.UpdateValidatorListBalance;
    } & ParsedUpdateValidatorListBalanceInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.UpdateStakePoolBalance;
    } & ParsedUpdateStakePoolBalanceInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.CleanupRemovedValidatorEntries;
    } & ParsedCleanupRemovedValidatorEntriesInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.DepositStake;
    } & ParsedDepositStakeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.WithdrawStake;
    } & ParsedWithdrawStakeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.SetManager;
    } & ParsedSetManagerInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.SetFee;
    } & ParsedSetFeeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.SetStaker;
    } & ParsedSetStakerInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.DepositSol;
    } & ParsedDepositSolInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.SetFundingAuthority;
    } & ParsedSetFundingAuthorityInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.WithdrawSol;
    } & ParsedWithdrawSolInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.CreateTokenMetadata;
    } & ParsedCreateTokenMetadataInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.UpdateTokenMetadata;
    } & ParsedUpdateTokenMetadataInstruction<TProgram>);
