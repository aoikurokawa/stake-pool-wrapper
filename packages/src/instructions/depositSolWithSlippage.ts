/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DEPOSIT_SOL_WITH_SLIPPAGE_DISCRIMINATOR = 25;

export function getDepositSolWithSlippageDiscriminatorBytes() {
  return getU8Encoder().encode(DEPOSIT_SOL_WITH_SLIPPAGE_DISCRIMINATOR);
}

export type DepositSolWithSlippageInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountWithdrawAuthority extends string | IAccountMeta<string> = string,
  TAccountReserveStakeAccount extends string | IAccountMeta<string> = string,
  TAccountFromUserLamports extends string | IAccountMeta<string> = string,
  TAccountDestUserPool extends string | IAccountMeta<string> = string,
  TAccountManagerFee extends string | IAccountMeta<string> = string,
  TAccountReferrerFee extends string | IAccountMeta<string> = string,
  TAccountPoolMint extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountReserveStakeAccount extends string
        ? WritableAccount<TAccountReserveStakeAccount>
        : TAccountReserveStakeAccount,
      TAccountFromUserLamports extends string
        ? ReadonlySignerAccount<TAccountFromUserLamports> &
            IAccountSignerMeta<TAccountFromUserLamports>
        : TAccountFromUserLamports,
      TAccountDestUserPool extends string
        ? WritableAccount<TAccountDestUserPool>
        : TAccountDestUserPool,
      TAccountManagerFee extends string
        ? WritableAccount<TAccountManagerFee>
        : TAccountManagerFee,
      TAccountReferrerFee extends string
        ? WritableAccount<TAccountReferrerFee>
        : TAccountReferrerFee,
      TAccountPoolMint extends string
        ? WritableAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DepositSolWithSlippageInstructionData = {
  discriminator: number;
  lamportsIn: bigint;
  minimumPoolTokensOut: bigint;
};

export type DepositSolWithSlippageInstructionDataArgs = {
  lamportsIn: number | bigint;
  minimumPoolTokensOut: number | bigint;
};

export function getDepositSolWithSlippageInstructionDataEncoder(): Encoder<DepositSolWithSlippageInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['lamportsIn', getU64Encoder()],
      ['minimumPoolTokensOut', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DEPOSIT_SOL_WITH_SLIPPAGE_DISCRIMINATOR,
    })
  );
}

export function getDepositSolWithSlippageInstructionDataDecoder(): Decoder<DepositSolWithSlippageInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['lamportsIn', getU64Decoder()],
    ['minimumPoolTokensOut', getU64Decoder()],
  ]);
}

export function getDepositSolWithSlippageInstructionDataCodec(): Codec<
  DepositSolWithSlippageInstructionDataArgs,
  DepositSolWithSlippageInstructionData
> {
  return combineCodec(
    getDepositSolWithSlippageInstructionDataEncoder(),
    getDepositSolWithSlippageInstructionDataDecoder()
  );
}

export type DepositSolWithSlippageInput<
  TAccountStakePool extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountReserveStakeAccount extends string = string,
  TAccountFromUserLamports extends string = string,
  TAccountDestUserPool extends string = string,
  TAccountManagerFee extends string = string,
  TAccountReferrerFee extends string = string,
  TAccountPoolMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  reserveStakeAccount: Address<TAccountReserveStakeAccount>;
  fromUserLamports: TransactionSigner<TAccountFromUserLamports>;
  destUserPool: Address<TAccountDestUserPool>;
  managerFee: Address<TAccountManagerFee>;
  referrerFee: Address<TAccountReferrerFee>;
  poolMint: Address<TAccountPoolMint>;
  systemProgram: Address<TAccountSystemProgram>;
  tokenProgram: Address<TAccountTokenProgram>;
  lamportsIn: DepositSolWithSlippageInstructionDataArgs['lamportsIn'];
  minimumPoolTokensOut: DepositSolWithSlippageInstructionDataArgs['minimumPoolTokensOut'];
};

export function getDepositSolWithSlippageInstruction<
  TAccountStakePool extends string,
  TAccountWithdrawAuthority extends string,
  TAccountReserveStakeAccount extends string,
  TAccountFromUserLamports extends string,
  TAccountDestUserPool extends string,
  TAccountManagerFee extends string,
  TAccountReferrerFee extends string,
  TAccountPoolMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: DepositSolWithSlippageInput<
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountReserveStakeAccount,
    TAccountFromUserLamports,
    TAccountDestUserPool,
    TAccountManagerFee,
    TAccountReferrerFee,
    TAccountPoolMint,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DepositSolWithSlippageInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountWithdrawAuthority,
  TAccountReserveStakeAccount,
  TAccountFromUserLamports,
  TAccountDestUserPool,
  TAccountManagerFee,
  TAccountReferrerFee,
  TAccountPoolMint,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    reserveStakeAccount: {
      value: input.reserveStakeAccount ?? null,
      isWritable: true,
    },
    fromUserLamports: {
      value: input.fromUserLamports ?? null,
      isWritable: false,
    },
    destUserPool: { value: input.destUserPool ?? null, isWritable: true },
    managerFee: { value: input.managerFee ?? null, isWritable: true },
    referrerFee: { value: input.referrerFee ?? null, isWritable: true },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.reserveStakeAccount),
      getAccountMeta(accounts.fromUserLamports),
      getAccountMeta(accounts.destUserPool),
      getAccountMeta(accounts.managerFee),
      getAccountMeta(accounts.referrerFee),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getDepositSolWithSlippageInstructionDataEncoder().encode(
      args as DepositSolWithSlippageInstructionDataArgs
    ),
  } as DepositSolWithSlippageInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountReserveStakeAccount,
    TAccountFromUserLamports,
    TAccountDestUserPool,
    TAccountManagerFee,
    TAccountReferrerFee,
    TAccountPoolMint,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedDepositSolWithSlippageInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    withdrawAuthority: TAccountMetas[1];
    reserveStakeAccount: TAccountMetas[2];
    fromUserLamports: TAccountMetas[3];
    destUserPool: TAccountMetas[4];
    managerFee: TAccountMetas[5];
    referrerFee: TAccountMetas[6];
    poolMint: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
  };
  data: DepositSolWithSlippageInstructionData;
};

export function parseDepositSolWithSlippageInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDepositSolWithSlippageInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      reserveStakeAccount: getNextAccount(),
      fromUserLamports: getNextAccount(),
      destUserPool: getNextAccount(),
      managerFee: getNextAccount(),
      referrerFee: getNextAccount(),
      poolMint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getDepositSolWithSlippageInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
