/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import { getFeeDecoder, getFeeEncoder, type Fee, type FeeArgs } from '../types';

export const INITIALIZE_DISCRIMINATOR = 0;

export function getInitializeDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_DISCRIMINATOR);
}

export type InitializeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountManager extends string | IAccountMeta<string> = string,
  TAccountStaker extends string | IAccountMeta<string> = string,
  TAccountWithdrawAuthority extends string | IAccountMeta<string> = string,
  TAccountValidatorList extends string | IAccountMeta<string> = string,
  TAccountReserveStake extends string | IAccountMeta<string> = string,
  TAccountPoolMint extends string | IAccountMeta<string> = string,
  TAccountManagerFee extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountManager extends string
        ? ReadonlySignerAccount<TAccountManager> &
            IAccountSignerMeta<TAccountManager>
        : TAccountManager,
      TAccountStaker extends string
        ? ReadonlyAccount<TAccountStaker>
        : TAccountStaker,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountReserveStake extends string
        ? ReadonlyAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountPoolMint extends string
        ? ReadonlyAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountManagerFee extends string
        ? ReadonlyAccount<TAccountManagerFee>
        : TAccountManagerFee,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeInstructionData = {
  discriminator: number;
  fee: Fee;
  withdrawalFee: Fee;
  depositFee: Fee;
  referralFee: number;
  maxValidators: number;
};

export type InitializeInstructionDataArgs = {
  fee: FeeArgs;
  withdrawalFee: FeeArgs;
  depositFee: FeeArgs;
  referralFee: number;
  maxValidators: number;
};

export function getInitializeInstructionDataEncoder(): Encoder<InitializeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['fee', getFeeEncoder()],
      ['withdrawalFee', getFeeEncoder()],
      ['depositFee', getFeeEncoder()],
      ['referralFee', getU8Encoder()],
      ['maxValidators', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_DISCRIMINATOR })
  );
}

export function getInitializeInstructionDataDecoder(): Decoder<InitializeInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['fee', getFeeDecoder()],
    ['withdrawalFee', getFeeDecoder()],
    ['depositFee', getFeeDecoder()],
    ['referralFee', getU8Decoder()],
    ['maxValidators', getU32Decoder()],
  ]);
}

export function getInitializeInstructionDataCodec(): Codec<
  InitializeInstructionDataArgs,
  InitializeInstructionData
> {
  return combineCodec(
    getInitializeInstructionDataEncoder(),
    getInitializeInstructionDataDecoder()
  );
}

export type InitializeInput<
  TAccountStakePool extends string = string,
  TAccountManager extends string = string,
  TAccountStaker extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountPoolMint extends string = string,
  TAccountManagerFee extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  manager: TransactionSigner<TAccountManager>;
  staker: Address<TAccountStaker>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  poolMint: Address<TAccountPoolMint>;
  managerFee: Address<TAccountManagerFee>;
  tokenProgram: Address<TAccountTokenProgram>;
  fee: InitializeInstructionDataArgs['fee'];
  withdrawalFee: InitializeInstructionDataArgs['withdrawalFee'];
  depositFee: InitializeInstructionDataArgs['depositFee'];
  referralFee: InitializeInstructionDataArgs['referralFee'];
  maxValidators: InitializeInstructionDataArgs['maxValidators'];
};

export function getInitializeInstruction<
  TAccountStakePool extends string,
  TAccountManager extends string,
  TAccountStaker extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountPoolMint extends string,
  TAccountManagerFee extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: InitializeInput<
    TAccountStakePool,
    TAccountManager,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountPoolMint,
    TAccountManagerFee,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountManager,
  TAccountStaker,
  TAccountWithdrawAuthority,
  TAccountValidatorList,
  TAccountReserveStake,
  TAccountPoolMint,
  TAccountManagerFee,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    manager: { value: input.manager ?? null, isWritable: false },
    staker: { value: input.staker ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: false },
    poolMint: { value: input.poolMint ?? null, isWritable: false },
    managerFee: { value: input.managerFee ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.manager),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.managerFee),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getInitializeInstructionDataEncoder().encode(
      args as InitializeInstructionDataArgs
    ),
  } as InitializeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountManager,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountPoolMint,
    TAccountManagerFee,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedInitializeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    manager: TAccountMetas[1];
    staker: TAccountMetas[2];
    withdrawAuthority: TAccountMetas[3];
    validatorList: TAccountMetas[4];
    reserveStake: TAccountMetas[5];
    poolMint: TAccountMetas[6];
    managerFee: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
  };
  data: InitializeInstructionData;
};

export function parseInitializeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      manager: getNextAccount(),
      staker: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      reserveStake: getNextAccount(),
      poolMint: getNextAccount(),
      managerFee: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getInitializeInstructionDataDecoder().decode(instruction.data),
  };
}
