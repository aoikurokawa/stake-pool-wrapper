/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_MANAGER_DISCRIMINATOR = 11;

export function getSetManagerDiscriminatorBytes() {
  return getU8Encoder().encode(SET_MANAGER_DISCRIMINATOR);
}

export type SetManagerInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountManager extends string | IAccountMeta<string> = string,
  TAccountNewManager extends string | IAccountMeta<string> = string,
  TAccountNewManagerFee extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountManager extends string
        ? ReadonlySignerAccount<TAccountManager> &
            IAccountSignerMeta<TAccountManager>
        : TAccountManager,
      TAccountNewManager extends string
        ? ReadonlySignerAccount<TAccountNewManager> &
            IAccountSignerMeta<TAccountNewManager>
        : TAccountNewManager,
      TAccountNewManagerFee extends string
        ? ReadonlyAccount<TAccountNewManagerFee>
        : TAccountNewManagerFee,
      ...TRemainingAccounts,
    ]
  >;

export type SetManagerInstructionData = { discriminator: number };

export type SetManagerInstructionDataArgs = {};

export function getSetManagerInstructionDataEncoder(): Encoder<SetManagerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: SET_MANAGER_DISCRIMINATOR })
  );
}

export function getSetManagerInstructionDataDecoder(): Decoder<SetManagerInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getSetManagerInstructionDataCodec(): Codec<
  SetManagerInstructionDataArgs,
  SetManagerInstructionData
> {
  return combineCodec(
    getSetManagerInstructionDataEncoder(),
    getSetManagerInstructionDataDecoder()
  );
}

export type SetManagerInput<
  TAccountStakePool extends string = string,
  TAccountManager extends string = string,
  TAccountNewManager extends string = string,
  TAccountNewManagerFee extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  manager: TransactionSigner<TAccountManager>;
  newManager: TransactionSigner<TAccountNewManager>;
  newManagerFee: Address<TAccountNewManagerFee>;
};

export function getSetManagerInstruction<
  TAccountStakePool extends string,
  TAccountManager extends string,
  TAccountNewManager extends string,
  TAccountNewManagerFee extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: SetManagerInput<
    TAccountStakePool,
    TAccountManager,
    TAccountNewManager,
    TAccountNewManagerFee
  >,
  config?: { programAddress?: TProgramAddress }
): SetManagerInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountManager,
  TAccountNewManager,
  TAccountNewManagerFee
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    manager: { value: input.manager ?? null, isWritable: false },
    newManager: { value: input.newManager ?? null, isWritable: false },
    newManagerFee: { value: input.newManagerFee ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.manager),
      getAccountMeta(accounts.newManager),
      getAccountMeta(accounts.newManagerFee),
    ],
    programAddress,
    data: getSetManagerInstructionDataEncoder().encode({}),
  } as SetManagerInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountManager,
    TAccountNewManager,
    TAccountNewManagerFee
  >;

  return instruction;
}

export type ParsedSetManagerInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    manager: TAccountMetas[1];
    newManager: TAccountMetas[2];
    newManagerFee: TAccountMetas[3];
  };
  data: SetManagerInstructionData;
};

export function parseSetManagerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetManagerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      manager: getNextAccount(),
      newManager: getNextAccount(),
      newManagerFee: getNextAccount(),
    },
    data: getSetManagerInstructionDataDecoder().decode(instruction.data),
  };
}
