/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const WITHDRAW_SOL_DISCRIMINATOR = new Uint8Array([
  145, 131, 74, 136, 65, 137, 42, 38,
]);

export function getWithdrawSolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_SOL_DISCRIMINATOR
  );
}

export type WithdrawSolInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountStakePoolWithdrawAuthority extends
    | string
    | IAccountMeta<string> = string,
  TAccountUserTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountPoolTokensFrom extends string | IAccountMeta<string> = string,
  TAccountReserveStakeAccount extends string | IAccountMeta<string> = string,
  TAccountLamportsTo extends string | IAccountMeta<string> = string,
  TAccountManagerFeeAccount extends string | IAccountMeta<string> = string,
  TAccountPoolMint extends string | IAccountMeta<string> = string,
  TAccountClock extends string | IAccountMeta<string> = string,
  TAccountSysvarStakeHistory extends
    | string
    | IAccountMeta<string> = 'SysvarStakeHistory1111111111111111111111111',
  TAccountStakeProgram extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStakePoolWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountStakePoolWithdrawAuthority>
        : TAccountStakePoolWithdrawAuthority,
      TAccountUserTransferAuthority extends string
        ? ReadonlySignerAccount<TAccountUserTransferAuthority> &
            IAccountSignerMeta<TAccountUserTransferAuthority>
        : TAccountUserTransferAuthority,
      TAccountPoolTokensFrom extends string
        ? WritableAccount<TAccountPoolTokensFrom>
        : TAccountPoolTokensFrom,
      TAccountReserveStakeAccount extends string
        ? WritableAccount<TAccountReserveStakeAccount>
        : TAccountReserveStakeAccount,
      TAccountLamportsTo extends string
        ? WritableAccount<TAccountLamportsTo>
        : TAccountLamportsTo,
      TAccountManagerFeeAccount extends string
        ? WritableAccount<TAccountManagerFeeAccount>
        : TAccountManagerFeeAccount,
      TAccountPoolMint extends string
        ? WritableAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountSysvarStakeHistory extends string
        ? ReadonlyAccount<TAccountSysvarStakeHistory>
        : TAccountSysvarStakeHistory,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawSolInstructionData = {
  discriminator: ReadonlyUint8Array;
  arg: bigint;
};

export type WithdrawSolInstructionDataArgs = { arg: number | bigint };

export function getWithdrawSolInstructionDataEncoder(): Encoder<WithdrawSolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['arg', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WITHDRAW_SOL_DISCRIMINATOR })
  );
}

export function getWithdrawSolInstructionDataDecoder(): Decoder<WithdrawSolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['arg', getU64Decoder()],
  ]);
}

export function getWithdrawSolInstructionDataCodec(): Codec<
  WithdrawSolInstructionDataArgs,
  WithdrawSolInstructionData
> {
  return combineCodec(
    getWithdrawSolInstructionDataEncoder(),
    getWithdrawSolInstructionDataDecoder()
  );
}

export type WithdrawSolInput<
  TAccountStakePool extends string = string,
  TAccountStakePoolWithdrawAuthority extends string = string,
  TAccountUserTransferAuthority extends string = string,
  TAccountPoolTokensFrom extends string = string,
  TAccountReserveStakeAccount extends string = string,
  TAccountLamportsTo extends string = string,
  TAccountManagerFeeAccount extends string = string,
  TAccountPoolMint extends string = string,
  TAccountClock extends string = string,
  TAccountSysvarStakeHistory extends string = string,
  TAccountStakeProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  stakePoolWithdrawAuthority: Address<TAccountStakePoolWithdrawAuthority>;
  userTransferAuthority: TransactionSigner<TAccountUserTransferAuthority>;
  poolTokensFrom: Address<TAccountPoolTokensFrom>;
  reserveStakeAccount: Address<TAccountReserveStakeAccount>;
  lamportsTo: Address<TAccountLamportsTo>;
  managerFeeAccount: Address<TAccountManagerFeeAccount>;
  poolMint: Address<TAccountPoolMint>;
  clock: Address<TAccountClock>;
  sysvarStakeHistory?: Address<TAccountSysvarStakeHistory>;
  stakeProgram: Address<TAccountStakeProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  arg: WithdrawSolInstructionDataArgs['arg'];
};

export function getWithdrawSolInstruction<
  TAccountStakePool extends string,
  TAccountStakePoolWithdrawAuthority extends string,
  TAccountUserTransferAuthority extends string,
  TAccountPoolTokensFrom extends string,
  TAccountReserveStakeAccount extends string,
  TAccountLamportsTo extends string,
  TAccountManagerFeeAccount extends string,
  TAccountPoolMint extends string,
  TAccountClock extends string,
  TAccountSysvarStakeHistory extends string,
  TAccountStakeProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: WithdrawSolInput<
    TAccountStakePool,
    TAccountStakePoolWithdrawAuthority,
    TAccountUserTransferAuthority,
    TAccountPoolTokensFrom,
    TAccountReserveStakeAccount,
    TAccountLamportsTo,
    TAccountManagerFeeAccount,
    TAccountPoolMint,
    TAccountClock,
    TAccountSysvarStakeHistory,
    TAccountStakeProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawSolInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountStakePoolWithdrawAuthority,
  TAccountUserTransferAuthority,
  TAccountPoolTokensFrom,
  TAccountReserveStakeAccount,
  TAccountLamportsTo,
  TAccountManagerFeeAccount,
  TAccountPoolMint,
  TAccountClock,
  TAccountSysvarStakeHistory,
  TAccountStakeProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    stakePoolWithdrawAuthority: {
      value: input.stakePoolWithdrawAuthority ?? null,
      isWritable: false,
    },
    userTransferAuthority: {
      value: input.userTransferAuthority ?? null,
      isWritable: false,
    },
    poolTokensFrom: { value: input.poolTokensFrom ?? null, isWritable: true },
    reserveStakeAccount: {
      value: input.reserveStakeAccount ?? null,
      isWritable: true,
    },
    lamportsTo: { value: input.lamportsTo ?? null, isWritable: true },
    managerFeeAccount: {
      value: input.managerFeeAccount ?? null,
      isWritable: true,
    },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
    sysvarStakeHistory: {
      value: input.sysvarStakeHistory ?? null,
      isWritable: false,
    },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.sysvarStakeHistory.value) {
    accounts.sysvarStakeHistory.value =
      'SysvarStakeHistory1111111111111111111111111' as Address<'SysvarStakeHistory1111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.stakePoolWithdrawAuthority),
      getAccountMeta(accounts.userTransferAuthority),
      getAccountMeta(accounts.poolTokensFrom),
      getAccountMeta(accounts.reserveStakeAccount),
      getAccountMeta(accounts.lamportsTo),
      getAccountMeta(accounts.managerFeeAccount),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.sysvarStakeHistory),
      getAccountMeta(accounts.stakeProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getWithdrawSolInstructionDataEncoder().encode(
      args as WithdrawSolInstructionDataArgs
    ),
  } as WithdrawSolInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStakePoolWithdrawAuthority,
    TAccountUserTransferAuthority,
    TAccountPoolTokensFrom,
    TAccountReserveStakeAccount,
    TAccountLamportsTo,
    TAccountManagerFeeAccount,
    TAccountPoolMint,
    TAccountClock,
    TAccountSysvarStakeHistory,
    TAccountStakeProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedWithdrawSolInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    stakePoolWithdrawAuthority: TAccountMetas[1];
    userTransferAuthority: TAccountMetas[2];
    poolTokensFrom: TAccountMetas[3];
    reserveStakeAccount: TAccountMetas[4];
    lamportsTo: TAccountMetas[5];
    managerFeeAccount: TAccountMetas[6];
    poolMint: TAccountMetas[7];
    clock: TAccountMetas[8];
    sysvarStakeHistory: TAccountMetas[9];
    stakeProgram: TAccountMetas[10];
    tokenProgram: TAccountMetas[11];
  };
  data: WithdrawSolInstructionData;
};

export function parseWithdrawSolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWithdrawSolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      stakePoolWithdrawAuthority: getNextAccount(),
      userTransferAuthority: getNextAccount(),
      poolTokensFrom: getNextAccount(),
      reserveStakeAccount: getNextAccount(),
      lamportsTo: getNextAccount(),
      managerFeeAccount: getNextAccount(),
      poolMint: getNextAccount(),
      clock: getNextAccount(),
      sysvarStakeHistory: getNextAccount(),
      stakeProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getWithdrawSolInstructionDataDecoder().decode(instruction.data),
  };
}
