/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CREATE_TOKEN_METADATA_DISCRIMINATOR = new Uint8Array([
  221, 80, 176, 37, 153, 188, 160, 68,
]);

export function getCreateTokenMetadataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_TOKEN_METADATA_DISCRIMINATOR
  );
}

export type CreateTokenMetadataInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountManager extends string | IAccountMeta<string> = string,
  TAccountStakePoolWithdrawAuthority extends
    | string
    | IAccountMeta<string> = string,
  TAccountPoolMint extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountTokenMetadata extends string | IAccountMeta<string> = string,
  TAccountMplTokenMetadata extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountManager extends string
        ? ReadonlySignerAccount<TAccountManager> &
            IAccountSignerMeta<TAccountManager>
        : TAccountManager,
      TAccountStakePoolWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountStakePoolWithdrawAuthority>
        : TAccountStakePoolWithdrawAuthority,
      TAccountPoolMint extends string
        ? ReadonlyAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTokenMetadata extends string
        ? WritableAccount<TAccountTokenMetadata>
        : TAccountTokenMetadata,
      TAccountMplTokenMetadata extends string
        ? ReadonlyAccount<TAccountMplTokenMetadata>
        : TAccountMplTokenMetadata,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type CreateTokenMetadataInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: string;
  symbol: string;
  uri: string;
};

export type CreateTokenMetadataInstructionDataArgs = {
  name: string;
  symbol: string;
  uri: string;
};

export function getCreateTokenMetadataInstructionDataEncoder(): Encoder<CreateTokenMetadataInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['symbol', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_TOKEN_METADATA_DISCRIMINATOR,
    })
  );
}

export function getCreateTokenMetadataInstructionDataDecoder(): Decoder<CreateTokenMetadataInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['symbol', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getCreateTokenMetadataInstructionDataCodec(): Codec<
  CreateTokenMetadataInstructionDataArgs,
  CreateTokenMetadataInstructionData
> {
  return combineCodec(
    getCreateTokenMetadataInstructionDataEncoder(),
    getCreateTokenMetadataInstructionDataDecoder()
  );
}

export type CreateTokenMetadataInput<
  TAccountStakePool extends string = string,
  TAccountManager extends string = string,
  TAccountStakePoolWithdrawAuthority extends string = string,
  TAccountPoolMint extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenMetadata extends string = string,
  TAccountMplTokenMetadata extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  manager: TransactionSigner<TAccountManager>;
  stakePoolWithdrawAuthority: Address<TAccountStakePoolWithdrawAuthority>;
  poolMint: Address<TAccountPoolMint>;
  payer: TransactionSigner<TAccountPayer>;
  tokenMetadata: Address<TAccountTokenMetadata>;
  mplTokenMetadata: Address<TAccountMplTokenMetadata>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  name: CreateTokenMetadataInstructionDataArgs['name'];
  symbol: CreateTokenMetadataInstructionDataArgs['symbol'];
  uri: CreateTokenMetadataInstructionDataArgs['uri'];
};

export function getCreateTokenMetadataInstruction<
  TAccountStakePool extends string,
  TAccountManager extends string,
  TAccountStakePoolWithdrawAuthority extends string,
  TAccountPoolMint extends string,
  TAccountPayer extends string,
  TAccountTokenMetadata extends string,
  TAccountMplTokenMetadata extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: CreateTokenMetadataInput<
    TAccountStakePool,
    TAccountManager,
    TAccountStakePoolWithdrawAuthority,
    TAccountPoolMint,
    TAccountPayer,
    TAccountTokenMetadata,
    TAccountMplTokenMetadata,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): CreateTokenMetadataInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountManager,
  TAccountStakePoolWithdrawAuthority,
  TAccountPoolMint,
  TAccountPayer,
  TAccountTokenMetadata,
  TAccountMplTokenMetadata,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    manager: { value: input.manager ?? null, isWritable: false },
    stakePoolWithdrawAuthority: {
      value: input.stakePoolWithdrawAuthority ?? null,
      isWritable: false,
    },
    poolMint: { value: input.poolMint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    tokenMetadata: { value: input.tokenMetadata ?? null, isWritable: true },
    mplTokenMetadata: {
      value: input.mplTokenMetadata ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.manager),
      getAccountMeta(accounts.stakePoolWithdrawAuthority),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenMetadata),
      getAccountMeta(accounts.mplTokenMetadata),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getCreateTokenMetadataInstructionDataEncoder().encode(
      args as CreateTokenMetadataInstructionDataArgs
    ),
  } as CreateTokenMetadataInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountManager,
    TAccountStakePoolWithdrawAuthority,
    TAccountPoolMint,
    TAccountPayer,
    TAccountTokenMetadata,
    TAccountMplTokenMetadata,
    TAccountSystemProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedCreateTokenMetadataInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    manager: TAccountMetas[1];
    stakePoolWithdrawAuthority: TAccountMetas[2];
    poolMint: TAccountMetas[3];
    payer: TAccountMetas[4];
    tokenMetadata: TAccountMetas[5];
    mplTokenMetadata: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
    rent: TAccountMetas[8];
  };
  data: CreateTokenMetadataInstructionData;
};

export function parseCreateTokenMetadataInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateTokenMetadataInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      manager: getNextAccount(),
      stakePoolWithdrawAuthority: getNextAccount(),
      poolMint: getNextAccount(),
      payer: getNextAccount(),
      tokenMetadata: getNextAccount(),
      mplTokenMetadata: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getCreateTokenMetadataInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
