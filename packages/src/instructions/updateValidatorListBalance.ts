/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_VALIDATOR_LIST_BALANCE_DISCRIMINATOR = 6;

export function getUpdateValidatorListBalanceDiscriminatorBytes() {
  return getU8Encoder().encode(UPDATE_VALIDATOR_LIST_BALANCE_DISCRIMINATOR);
}

export type UpdateValidatorListBalanceInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountWithdrawAuthority extends string | IAccountMeta<string> = string,
  TAccountValidatorList extends string | IAccountMeta<string> = string,
  TAccountReserveStake extends string | IAccountMeta<string> = string,
  TAccountClock extends string | IAccountMeta<string> = string,
  TAccountStakeHistory extends string | IAccountMeta<string> = string,
  TAccountStakeProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountReserveStake extends string
        ? WritableAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountStakeHistory extends string
        ? ReadonlyAccount<TAccountStakeHistory>
        : TAccountStakeHistory,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateValidatorListBalanceInstructionData = {
  discriminator: number;
  startIndex: number;
  noMerge: boolean;
};

export type UpdateValidatorListBalanceInstructionDataArgs = {
  startIndex: number;
  noMerge: boolean;
};

export function getUpdateValidatorListBalanceInstructionDataEncoder(): Encoder<UpdateValidatorListBalanceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['startIndex', getU32Encoder()],
      ['noMerge', getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_VALIDATOR_LIST_BALANCE_DISCRIMINATOR,
    })
  );
}

export function getUpdateValidatorListBalanceInstructionDataDecoder(): Decoder<UpdateValidatorListBalanceInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['startIndex', getU32Decoder()],
    ['noMerge', getBooleanDecoder()],
  ]);
}

export function getUpdateValidatorListBalanceInstructionDataCodec(): Codec<
  UpdateValidatorListBalanceInstructionDataArgs,
  UpdateValidatorListBalanceInstructionData
> {
  return combineCodec(
    getUpdateValidatorListBalanceInstructionDataEncoder(),
    getUpdateValidatorListBalanceInstructionDataDecoder()
  );
}

export type UpdateValidatorListBalanceInput<
  TAccountStakePool extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountClock extends string = string,
  TAccountStakeHistory extends string = string,
  TAccountStakeProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  clock: Address<TAccountClock>;
  stakeHistory: Address<TAccountStakeHistory>;
  stakeProgram: Address<TAccountStakeProgram>;
  startIndex: UpdateValidatorListBalanceInstructionDataArgs['startIndex'];
  noMerge: UpdateValidatorListBalanceInstructionDataArgs['noMerge'];
};

export function getUpdateValidatorListBalanceInstruction<
  TAccountStakePool extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountClock extends string,
  TAccountStakeHistory extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: UpdateValidatorListBalanceInput<
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountClock,
    TAccountStakeHistory,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateValidatorListBalanceInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountWithdrawAuthority,
  TAccountValidatorList,
  TAccountReserveStake,
  TAccountClock,
  TAccountStakeHistory,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.stakeHistory),
      getAccountMeta(accounts.stakeProgram),
    ],
    programAddress,
    data: getUpdateValidatorListBalanceInstructionDataEncoder().encode(
      args as UpdateValidatorListBalanceInstructionDataArgs
    ),
  } as UpdateValidatorListBalanceInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountClock,
    TAccountStakeHistory,
    TAccountStakeProgram
  >;

  return instruction;
}

export type ParsedUpdateValidatorListBalanceInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    withdrawAuthority: TAccountMetas[1];
    validatorList: TAccountMetas[2];
    reserveStake: TAccountMetas[3];
    clock: TAccountMetas[4];
    stakeHistory: TAccountMetas[5];
    stakeProgram: TAccountMetas[6];
  };
  data: UpdateValidatorListBalanceInstructionData;
};

export function parseUpdateValidatorListBalanceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateValidatorListBalanceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      reserveStake: getNextAccount(),
      clock: getNextAccount(),
      stakeHistory: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getUpdateValidatorListBalanceInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
