/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_VALIDATOR_LIST_BALANCE_DISCRIMINATOR = new Uint8Array([
  98, 93, 78, 124, 109, 4, 165, 194,
]);

export function getUpdateValidatorListBalanceDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_VALIDATOR_LIST_BALANCE_DISCRIMINATOR
  );
}

export type UpdateValidatorListBalanceInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountStakePoolWithdrawAuthority extends
    | string
    | IAccountMeta<string> = string,
  TAccountValidatorListAddress extends string | IAccountMeta<string> = string,
  TAccountReserveStake extends string | IAccountMeta<string> = string,
  TAccountClock extends string | IAccountMeta<string> = string,
  TAccountSysvarStakeHistory extends
    | string
    | IAccountMeta<string> = 'SysvarStakeHistory1111111111111111111111111',
  TAccountStakeProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStakePoolWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountStakePoolWithdrawAuthority>
        : TAccountStakePoolWithdrawAuthority,
      TAccountValidatorListAddress extends string
        ? WritableAccount<TAccountValidatorListAddress>
        : TAccountValidatorListAddress,
      TAccountReserveStake extends string
        ? WritableAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountSysvarStakeHistory extends string
        ? ReadonlyAccount<TAccountSysvarStakeHistory>
        : TAccountSysvarStakeHistory,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateValidatorListBalanceInstructionData = {
  discriminator: ReadonlyUint8Array;
  startIndex: number;
  noMerge: boolean;
};

export type UpdateValidatorListBalanceInstructionDataArgs = {
  startIndex: number;
  noMerge: boolean;
};

export function getUpdateValidatorListBalanceInstructionDataEncoder(): Encoder<UpdateValidatorListBalanceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['startIndex', getU32Encoder()],
      ['noMerge', getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_VALIDATOR_LIST_BALANCE_DISCRIMINATOR,
    })
  );
}

export function getUpdateValidatorListBalanceInstructionDataDecoder(): Decoder<UpdateValidatorListBalanceInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['startIndex', getU32Decoder()],
    ['noMerge', getBooleanDecoder()],
  ]);
}

export function getUpdateValidatorListBalanceInstructionDataCodec(): Codec<
  UpdateValidatorListBalanceInstructionDataArgs,
  UpdateValidatorListBalanceInstructionData
> {
  return combineCodec(
    getUpdateValidatorListBalanceInstructionDataEncoder(),
    getUpdateValidatorListBalanceInstructionDataDecoder()
  );
}

export type UpdateValidatorListBalanceInput<
  TAccountStakePool extends string = string,
  TAccountStakePoolWithdrawAuthority extends string = string,
  TAccountValidatorListAddress extends string = string,
  TAccountReserveStake extends string = string,
  TAccountClock extends string = string,
  TAccountSysvarStakeHistory extends string = string,
  TAccountStakeProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  stakePoolWithdrawAuthority: Address<TAccountStakePoolWithdrawAuthority>;
  validatorListAddress: Address<TAccountValidatorListAddress>;
  reserveStake: Address<TAccountReserveStake>;
  clock: Address<TAccountClock>;
  sysvarStakeHistory?: Address<TAccountSysvarStakeHistory>;
  stakeProgram: Address<TAccountStakeProgram>;
  startIndex: UpdateValidatorListBalanceInstructionDataArgs['startIndex'];
  noMerge: UpdateValidatorListBalanceInstructionDataArgs['noMerge'];
};

export function getUpdateValidatorListBalanceInstruction<
  TAccountStakePool extends string,
  TAccountStakePoolWithdrawAuthority extends string,
  TAccountValidatorListAddress extends string,
  TAccountReserveStake extends string,
  TAccountClock extends string,
  TAccountSysvarStakeHistory extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: UpdateValidatorListBalanceInput<
    TAccountStakePool,
    TAccountStakePoolWithdrawAuthority,
    TAccountValidatorListAddress,
    TAccountReserveStake,
    TAccountClock,
    TAccountSysvarStakeHistory,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateValidatorListBalanceInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountStakePoolWithdrawAuthority,
  TAccountValidatorListAddress,
  TAccountReserveStake,
  TAccountClock,
  TAccountSysvarStakeHistory,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    stakePoolWithdrawAuthority: {
      value: input.stakePoolWithdrawAuthority ?? null,
      isWritable: false,
    },
    validatorListAddress: {
      value: input.validatorListAddress ?? null,
      isWritable: true,
    },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
    sysvarStakeHistory: {
      value: input.sysvarStakeHistory ?? null,
      isWritable: false,
    },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.sysvarStakeHistory.value) {
    accounts.sysvarStakeHistory.value =
      'SysvarStakeHistory1111111111111111111111111' as Address<'SysvarStakeHistory1111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.stakePoolWithdrawAuthority),
      getAccountMeta(accounts.validatorListAddress),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.sysvarStakeHistory),
      getAccountMeta(accounts.stakeProgram),
    ],
    programAddress,
    data: getUpdateValidatorListBalanceInstructionDataEncoder().encode(
      args as UpdateValidatorListBalanceInstructionDataArgs
    ),
  } as UpdateValidatorListBalanceInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStakePoolWithdrawAuthority,
    TAccountValidatorListAddress,
    TAccountReserveStake,
    TAccountClock,
    TAccountSysvarStakeHistory,
    TAccountStakeProgram
  >;

  return instruction;
}

export type ParsedUpdateValidatorListBalanceInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    stakePoolWithdrawAuthority: TAccountMetas[1];
    validatorListAddress: TAccountMetas[2];
    reserveStake: TAccountMetas[3];
    clock: TAccountMetas[4];
    sysvarStakeHistory: TAccountMetas[5];
    stakeProgram: TAccountMetas[6];
  };
  data: UpdateValidatorListBalanceInstructionData;
};

export function parseUpdateValidatorListBalanceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateValidatorListBalanceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      stakePoolWithdrawAuthority: getNextAccount(),
      validatorListAddress: getNextAccount(),
      reserveStake: getNextAccount(),
      clock: getNextAccount(),
      sysvarStakeHistory: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getUpdateValidatorListBalanceInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
