/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DECREASE_VALIDATOR_STAKE_WITH_RESERVE_DISCRIMINATOR = 21;

export function getDecreaseValidatorStakeWithReserveDiscriminatorBytes() {
  return getU8Encoder().encode(
    DECREASE_VALIDATOR_STAKE_WITH_RESERVE_DISCRIMINATOR
  );
}

export type DecreaseValidatorStakeWithReserveInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountStaker extends string | IAccountMeta<string> = string,
  TAccountWithdrawAuthority extends string | IAccountMeta<string> = string,
  TAccountValidatorList extends string | IAccountMeta<string> = string,
  TAccountReserveStakeAccount extends string | IAccountMeta<string> = string,
  TAccountValidatorStakeAccount extends string | IAccountMeta<string> = string,
  TAccountTransientStakeAccount extends string | IAccountMeta<string> = string,
  TAccountClock extends string | IAccountMeta<string> = string,
  TAccountStakeHistory extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends string | IAccountMeta<string> = string,
  TAccountStakeProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStaker extends string
        ? ReadonlySignerAccount<TAccountStaker> &
            IAccountSignerMeta<TAccountStaker>
        : TAccountStaker,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountReserveStakeAccount extends string
        ? WritableAccount<TAccountReserveStakeAccount>
        : TAccountReserveStakeAccount,
      TAccountValidatorStakeAccount extends string
        ? WritableAccount<TAccountValidatorStakeAccount>
        : TAccountValidatorStakeAccount,
      TAccountTransientStakeAccount extends string
        ? WritableAccount<TAccountTransientStakeAccount>
        : TAccountTransientStakeAccount,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountStakeHistory extends string
        ? ReadonlyAccount<TAccountStakeHistory>
        : TAccountStakeHistory,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DecreaseValidatorStakeWithReserveInstructionData = {
  discriminator: number;
  lamports: bigint;
  transientStakeSeed: bigint;
};

export type DecreaseValidatorStakeWithReserveInstructionDataArgs = {
  lamports: number | bigint;
  transientStakeSeed: number | bigint;
};

export function getDecreaseValidatorStakeWithReserveInstructionDataEncoder(): Encoder<DecreaseValidatorStakeWithReserveInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['lamports', getU64Encoder()],
      ['transientStakeSeed', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DECREASE_VALIDATOR_STAKE_WITH_RESERVE_DISCRIMINATOR,
    })
  );
}

export function getDecreaseValidatorStakeWithReserveInstructionDataDecoder(): Decoder<DecreaseValidatorStakeWithReserveInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['lamports', getU64Decoder()],
    ['transientStakeSeed', getU64Decoder()],
  ]);
}

export function getDecreaseValidatorStakeWithReserveInstructionDataCodec(): Codec<
  DecreaseValidatorStakeWithReserveInstructionDataArgs,
  DecreaseValidatorStakeWithReserveInstructionData
> {
  return combineCodec(
    getDecreaseValidatorStakeWithReserveInstructionDataEncoder(),
    getDecreaseValidatorStakeWithReserveInstructionDataDecoder()
  );
}

export type DecreaseValidatorStakeWithReserveInput<
  TAccountStakePool extends string = string,
  TAccountStaker extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStakeAccount extends string = string,
  TAccountValidatorStakeAccount extends string = string,
  TAccountTransientStakeAccount extends string = string,
  TAccountClock extends string = string,
  TAccountStakeHistory extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  staker: TransactionSigner<TAccountStaker>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStakeAccount: Address<TAccountReserveStakeAccount>;
  validatorStakeAccount: Address<TAccountValidatorStakeAccount>;
  transientStakeAccount: Address<TAccountTransientStakeAccount>;
  clock: Address<TAccountClock>;
  stakeHistory: Address<TAccountStakeHistory>;
  systemProgram: Address<TAccountSystemProgram>;
  stakeProgram: Address<TAccountStakeProgram>;
  lamports: DecreaseValidatorStakeWithReserveInstructionDataArgs['lamports'];
  transientStakeSeed: DecreaseValidatorStakeWithReserveInstructionDataArgs['transientStakeSeed'];
};

export function getDecreaseValidatorStakeWithReserveInstruction<
  TAccountStakePool extends string,
  TAccountStaker extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStakeAccount extends string,
  TAccountValidatorStakeAccount extends string,
  TAccountTransientStakeAccount extends string,
  TAccountClock extends string,
  TAccountStakeHistory extends string,
  TAccountSystemProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: DecreaseValidatorStakeWithReserveInput<
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStakeAccount,
    TAccountValidatorStakeAccount,
    TAccountTransientStakeAccount,
    TAccountClock,
    TAccountStakeHistory,
    TAccountSystemProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DecreaseValidatorStakeWithReserveInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountStaker,
  TAccountWithdrawAuthority,
  TAccountValidatorList,
  TAccountReserveStakeAccount,
  TAccountValidatorStakeAccount,
  TAccountTransientStakeAccount,
  TAccountClock,
  TAccountStakeHistory,
  TAccountSystemProgram,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    staker: { value: input.staker ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStakeAccount: {
      value: input.reserveStakeAccount ?? null,
      isWritable: true,
    },
    validatorStakeAccount: {
      value: input.validatorStakeAccount ?? null,
      isWritable: true,
    },
    transientStakeAccount: {
      value: input.transientStakeAccount ?? null,
      isWritable: true,
    },
    clock: { value: input.clock ?? null, isWritable: false },
    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStakeAccount),
      getAccountMeta(accounts.validatorStakeAccount),
      getAccountMeta(accounts.transientStakeAccount),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.stakeHistory),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    programAddress,
    data: getDecreaseValidatorStakeWithReserveInstructionDataEncoder().encode(
      args as DecreaseValidatorStakeWithReserveInstructionDataArgs
    ),
  } as DecreaseValidatorStakeWithReserveInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStakeAccount,
    TAccountValidatorStakeAccount,
    TAccountTransientStakeAccount,
    TAccountClock,
    TAccountStakeHistory,
    TAccountSystemProgram,
    TAccountStakeProgram
  >;

  return instruction;
}

export type ParsedDecreaseValidatorStakeWithReserveInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    staker: TAccountMetas[1];
    withdrawAuthority: TAccountMetas[2];
    validatorList: TAccountMetas[3];
    reserveStakeAccount: TAccountMetas[4];
    validatorStakeAccount: TAccountMetas[5];
    transientStakeAccount: TAccountMetas[6];
    clock: TAccountMetas[7];
    stakeHistory: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    stakeProgram: TAccountMetas[10];
  };
  data: DecreaseValidatorStakeWithReserveInstructionData;
};

export function parseDecreaseValidatorStakeWithReserveInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDecreaseValidatorStakeWithReserveInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      staker: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      reserveStakeAccount: getNextAccount(),
      validatorStakeAccount: getNextAccount(),
      transientStakeAccount: getNextAccount(),
      clock: getNextAccount(),
      stakeHistory: getNextAccount(),
      systemProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getDecreaseValidatorStakeWithReserveInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
