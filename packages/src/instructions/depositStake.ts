/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DEPOSIT_STAKE_DISCRIMINATOR = new Uint8Array([
  160, 167, 9, 220, 74, 243, 228, 43,
]);

export function getDepositStakeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEPOSIT_STAKE_DISCRIMINATOR
  );
}

export type DepositStakeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountValidatorListStorage extends string | IAccountMeta<string> = string,
  TAccountStakePoolDepositAuthority extends
    | string
    | IAccountMeta<string> = string,
  TAccountStakePoolWithdrawAuthority extends
    | string
    | IAccountMeta<string> = string,
  TAccountDepositStakeAddress extends string | IAccountMeta<string> = string,
  TAccountValidatorStakeAccount extends string | IAccountMeta<string> = string,
  TAccountReserveStakeAccount extends string | IAccountMeta<string> = string,
  TAccountPoolTokensTo extends string | IAccountMeta<string> = string,
  TAccountManagerFeeAccount extends string | IAccountMeta<string> = string,
  TAccountReferrerPoolTokensAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountPoolMint extends string | IAccountMeta<string> = string,
  TAccountClock extends string | IAccountMeta<string> = string,
  TAccountSysvarStakeHistory extends
    | string
    | IAccountMeta<string> = 'SysvarStakeHistory1111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountStakeProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountValidatorListStorage extends string
        ? WritableAccount<TAccountValidatorListStorage>
        : TAccountValidatorListStorage,
      TAccountStakePoolDepositAuthority extends string
        ? ReadonlyAccount<TAccountStakePoolDepositAuthority>
        : TAccountStakePoolDepositAuthority,
      TAccountStakePoolWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountStakePoolWithdrawAuthority>
        : TAccountStakePoolWithdrawAuthority,
      TAccountDepositStakeAddress extends string
        ? WritableAccount<TAccountDepositStakeAddress>
        : TAccountDepositStakeAddress,
      TAccountValidatorStakeAccount extends string
        ? WritableAccount<TAccountValidatorStakeAccount>
        : TAccountValidatorStakeAccount,
      TAccountReserveStakeAccount extends string
        ? WritableAccount<TAccountReserveStakeAccount>
        : TAccountReserveStakeAccount,
      TAccountPoolTokensTo extends string
        ? WritableAccount<TAccountPoolTokensTo>
        : TAccountPoolTokensTo,
      TAccountManagerFeeAccount extends string
        ? WritableAccount<TAccountManagerFeeAccount>
        : TAccountManagerFeeAccount,
      TAccountReferrerPoolTokensAccount extends string
        ? WritableAccount<TAccountReferrerPoolTokensAccount>
        : TAccountReferrerPoolTokensAccount,
      TAccountPoolMint extends string
        ? WritableAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountSysvarStakeHistory extends string
        ? ReadonlyAccount<TAccountSysvarStakeHistory>
        : TAccountSysvarStakeHistory,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DepositStakeInstructionData = { discriminator: ReadonlyUint8Array };

export type DepositStakeInstructionDataArgs = {};

export function getDepositStakeInstructionDataEncoder(): Encoder<DepositStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: DEPOSIT_STAKE_DISCRIMINATOR })
  );
}

export function getDepositStakeInstructionDataDecoder(): Decoder<DepositStakeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getDepositStakeInstructionDataCodec(): Codec<
  DepositStakeInstructionDataArgs,
  DepositStakeInstructionData
> {
  return combineCodec(
    getDepositStakeInstructionDataEncoder(),
    getDepositStakeInstructionDataDecoder()
  );
}

export type DepositStakeInput<
  TAccountStakePool extends string = string,
  TAccountValidatorListStorage extends string = string,
  TAccountStakePoolDepositAuthority extends string = string,
  TAccountStakePoolWithdrawAuthority extends string = string,
  TAccountDepositStakeAddress extends string = string,
  TAccountValidatorStakeAccount extends string = string,
  TAccountReserveStakeAccount extends string = string,
  TAccountPoolTokensTo extends string = string,
  TAccountManagerFeeAccount extends string = string,
  TAccountReferrerPoolTokensAccount extends string = string,
  TAccountPoolMint extends string = string,
  TAccountClock extends string = string,
  TAccountSysvarStakeHistory extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountStakeProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  validatorListStorage: Address<TAccountValidatorListStorage>;
  stakePoolDepositAuthority: Address<TAccountStakePoolDepositAuthority>;
  stakePoolWithdrawAuthority: Address<TAccountStakePoolWithdrawAuthority>;
  depositStakeAddress: Address<TAccountDepositStakeAddress>;
  validatorStakeAccount: Address<TAccountValidatorStakeAccount>;
  reserveStakeAccount: Address<TAccountReserveStakeAccount>;
  poolTokensTo: Address<TAccountPoolTokensTo>;
  managerFeeAccount: Address<TAccountManagerFeeAccount>;
  referrerPoolTokensAccount: Address<TAccountReferrerPoolTokensAccount>;
  poolMint: Address<TAccountPoolMint>;
  clock: Address<TAccountClock>;
  sysvarStakeHistory?: Address<TAccountSysvarStakeHistory>;
  tokenProgram?: Address<TAccountTokenProgram>;
  stakeProgram: Address<TAccountStakeProgram>;
};

export function getDepositStakeInstruction<
  TAccountStakePool extends string,
  TAccountValidatorListStorage extends string,
  TAccountStakePoolDepositAuthority extends string,
  TAccountStakePoolWithdrawAuthority extends string,
  TAccountDepositStakeAddress extends string,
  TAccountValidatorStakeAccount extends string,
  TAccountReserveStakeAccount extends string,
  TAccountPoolTokensTo extends string,
  TAccountManagerFeeAccount extends string,
  TAccountReferrerPoolTokensAccount extends string,
  TAccountPoolMint extends string,
  TAccountClock extends string,
  TAccountSysvarStakeHistory extends string,
  TAccountTokenProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: DepositStakeInput<
    TAccountStakePool,
    TAccountValidatorListStorage,
    TAccountStakePoolDepositAuthority,
    TAccountStakePoolWithdrawAuthority,
    TAccountDepositStakeAddress,
    TAccountValidatorStakeAccount,
    TAccountReserveStakeAccount,
    TAccountPoolTokensTo,
    TAccountManagerFeeAccount,
    TAccountReferrerPoolTokensAccount,
    TAccountPoolMint,
    TAccountClock,
    TAccountSysvarStakeHistory,
    TAccountTokenProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DepositStakeInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountValidatorListStorage,
  TAccountStakePoolDepositAuthority,
  TAccountStakePoolWithdrawAuthority,
  TAccountDepositStakeAddress,
  TAccountValidatorStakeAccount,
  TAccountReserveStakeAccount,
  TAccountPoolTokensTo,
  TAccountManagerFeeAccount,
  TAccountReferrerPoolTokensAccount,
  TAccountPoolMint,
  TAccountClock,
  TAccountSysvarStakeHistory,
  TAccountTokenProgram,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    validatorListStorage: {
      value: input.validatorListStorage ?? null,
      isWritable: true,
    },
    stakePoolDepositAuthority: {
      value: input.stakePoolDepositAuthority ?? null,
      isWritable: false,
    },
    stakePoolWithdrawAuthority: {
      value: input.stakePoolWithdrawAuthority ?? null,
      isWritable: false,
    },
    depositStakeAddress: {
      value: input.depositStakeAddress ?? null,
      isWritable: true,
    },
    validatorStakeAccount: {
      value: input.validatorStakeAccount ?? null,
      isWritable: true,
    },
    reserveStakeAccount: {
      value: input.reserveStakeAccount ?? null,
      isWritable: true,
    },
    poolTokensTo: { value: input.poolTokensTo ?? null, isWritable: true },
    managerFeeAccount: {
      value: input.managerFeeAccount ?? null,
      isWritable: true,
    },
    referrerPoolTokensAccount: {
      value: input.referrerPoolTokensAccount ?? null,
      isWritable: true,
    },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
    sysvarStakeHistory: {
      value: input.sysvarStakeHistory ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.sysvarStakeHistory.value) {
    accounts.sysvarStakeHistory.value =
      'SysvarStakeHistory1111111111111111111111111' as Address<'SysvarStakeHistory1111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.validatorListStorage),
      getAccountMeta(accounts.stakePoolDepositAuthority),
      getAccountMeta(accounts.stakePoolWithdrawAuthority),
      getAccountMeta(accounts.depositStakeAddress),
      getAccountMeta(accounts.validatorStakeAccount),
      getAccountMeta(accounts.reserveStakeAccount),
      getAccountMeta(accounts.poolTokensTo),
      getAccountMeta(accounts.managerFeeAccount),
      getAccountMeta(accounts.referrerPoolTokensAccount),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.sysvarStakeHistory),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    programAddress,
    data: getDepositStakeInstructionDataEncoder().encode({}),
  } as DepositStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountValidatorListStorage,
    TAccountStakePoolDepositAuthority,
    TAccountStakePoolWithdrawAuthority,
    TAccountDepositStakeAddress,
    TAccountValidatorStakeAccount,
    TAccountReserveStakeAccount,
    TAccountPoolTokensTo,
    TAccountManagerFeeAccount,
    TAccountReferrerPoolTokensAccount,
    TAccountPoolMint,
    TAccountClock,
    TAccountSysvarStakeHistory,
    TAccountTokenProgram,
    TAccountStakeProgram
  >;

  return instruction;
}

export type ParsedDepositStakeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    validatorListStorage: TAccountMetas[1];
    stakePoolDepositAuthority: TAccountMetas[2];
    stakePoolWithdrawAuthority: TAccountMetas[3];
    depositStakeAddress: TAccountMetas[4];
    validatorStakeAccount: TAccountMetas[5];
    reserveStakeAccount: TAccountMetas[6];
    poolTokensTo: TAccountMetas[7];
    managerFeeAccount: TAccountMetas[8];
    referrerPoolTokensAccount: TAccountMetas[9];
    poolMint: TAccountMetas[10];
    clock: TAccountMetas[11];
    sysvarStakeHistory: TAccountMetas[12];
    tokenProgram: TAccountMetas[13];
    stakeProgram: TAccountMetas[14];
  };
  data: DepositStakeInstructionData;
};

export function parseDepositStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDepositStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      validatorListStorage: getNextAccount(),
      stakePoolDepositAuthority: getNextAccount(),
      stakePoolWithdrawAuthority: getNextAccount(),
      depositStakeAddress: getNextAccount(),
      validatorStakeAccount: getNextAccount(),
      reserveStakeAccount: getNextAccount(),
      poolTokensTo: getNextAccount(),
      managerFeeAccount: getNextAccount(),
      referrerPoolTokensAccount: getNextAccount(),
      poolMint: getNextAccount(),
      clock: getNextAccount(),
      sysvarStakeHistory: getNextAccount(),
      tokenProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getDepositStakeInstructionDataDecoder().decode(instruction.data),
  };
}
