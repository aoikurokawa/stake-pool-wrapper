/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getFeeTypeDecoder,
  getFeeTypeEncoder,
  type FeeType,
  type FeeTypeArgs,
} from '../types';

export const SET_FEE_DISCRIMINATOR = 12;

export function getSetFeeDiscriminatorBytes() {
  return getU8Encoder().encode(SET_FEE_DISCRIMINATOR);
}

export type SetFeeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountManager extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountManager extends string
        ? ReadonlySignerAccount<TAccountManager> &
            IAccountSignerMeta<TAccountManager>
        : TAccountManager,
      ...TRemainingAccounts,
    ]
  >;

export type SetFeeInstructionData = { discriminator: number; fee: FeeType };

export type SetFeeInstructionDataArgs = { fee: FeeTypeArgs };

export function getSetFeeInstructionDataEncoder(): Encoder<SetFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['fee', getFeeTypeEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_FEE_DISCRIMINATOR })
  );
}

export function getSetFeeInstructionDataDecoder(): Decoder<SetFeeInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['fee', getFeeTypeDecoder()],
  ]);
}

export function getSetFeeInstructionDataCodec(): Codec<
  SetFeeInstructionDataArgs,
  SetFeeInstructionData
> {
  return combineCodec(
    getSetFeeInstructionDataEncoder(),
    getSetFeeInstructionDataDecoder()
  );
}

export type SetFeeInput<
  TAccountStakePool extends string = string,
  TAccountManager extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  manager: TransactionSigner<TAccountManager>;
  fee: SetFeeInstructionDataArgs['fee'];
};

export function getSetFeeInstruction<
  TAccountStakePool extends string,
  TAccountManager extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: SetFeeInput<TAccountStakePool, TAccountManager>,
  config?: { programAddress?: TProgramAddress }
): SetFeeInstruction<TProgramAddress, TAccountStakePool, TAccountManager> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    manager: { value: input.manager ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.manager),
    ],
    programAddress,
    data: getSetFeeInstructionDataEncoder().encode(
      args as SetFeeInstructionDataArgs
    ),
  } as SetFeeInstruction<TProgramAddress, TAccountStakePool, TAccountManager>;

  return instruction;
}

export type ParsedSetFeeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    manager: TAccountMetas[1];
  };
  data: SetFeeInstructionData;
};

export function parseSetFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      manager: getNextAccount(),
    },
    data: getSetFeeInstructionDataDecoder().decode(instruction.data),
  };
}
