/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_STAKE_POOL_BALANCE_DISCRIMINATOR = 7;

export function getUpdateStakePoolBalanceDiscriminatorBytes() {
  return getU8Encoder().encode(UPDATE_STAKE_POOL_BALANCE_DISCRIMINATOR);
}

export type UpdateStakePoolBalanceInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountWithdraw extends string | IAccountMeta<string> = string,
  TAccountValidatorList extends string | IAccountMeta<string> = string,
  TAccountReserveStake extends string | IAccountMeta<string> = string,
  TAccountManagerFee extends string | IAccountMeta<string> = string,
  TAccountPoolMint extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountWithdraw extends string
        ? ReadonlyAccount<TAccountWithdraw>
        : TAccountWithdraw,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountReserveStake extends string
        ? ReadonlyAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountManagerFee extends string
        ? WritableAccount<TAccountManagerFee>
        : TAccountManagerFee,
      TAccountPoolMint extends string
        ? WritableAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateStakePoolBalanceInstructionData = { discriminator: number };

export type UpdateStakePoolBalanceInstructionDataArgs = {};

export function getUpdateStakePoolBalanceInstructionDataEncoder(): Encoder<UpdateStakePoolBalanceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: UPDATE_STAKE_POOL_BALANCE_DISCRIMINATOR,
    })
  );
}

export function getUpdateStakePoolBalanceInstructionDataDecoder(): Decoder<UpdateStakePoolBalanceInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getUpdateStakePoolBalanceInstructionDataCodec(): Codec<
  UpdateStakePoolBalanceInstructionDataArgs,
  UpdateStakePoolBalanceInstructionData
> {
  return combineCodec(
    getUpdateStakePoolBalanceInstructionDataEncoder(),
    getUpdateStakePoolBalanceInstructionDataDecoder()
  );
}

export type UpdateStakePoolBalanceInput<
  TAccountStakePool extends string = string,
  TAccountWithdraw extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountManagerFee extends string = string,
  TAccountPoolMint extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  withdraw: Address<TAccountWithdraw>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  managerFee: Address<TAccountManagerFee>;
  poolMint: Address<TAccountPoolMint>;
  tokenProgram: Address<TAccountTokenProgram>;
};

export function getUpdateStakePoolBalanceInstruction<
  TAccountStakePool extends string,
  TAccountWithdraw extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountManagerFee extends string,
  TAccountPoolMint extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: UpdateStakePoolBalanceInput<
    TAccountStakePool,
    TAccountWithdraw,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountManagerFee,
    TAccountPoolMint,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateStakePoolBalanceInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountWithdraw,
  TAccountValidatorList,
  TAccountReserveStake,
  TAccountManagerFee,
  TAccountPoolMint,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    withdraw: { value: input.withdraw ?? null, isWritable: false },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: false },
    managerFee: { value: input.managerFee ?? null, isWritable: true },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.withdraw),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.managerFee),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getUpdateStakePoolBalanceInstructionDataEncoder().encode({}),
  } as UpdateStakePoolBalanceInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdraw,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountManagerFee,
    TAccountPoolMint,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedUpdateStakePoolBalanceInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    withdraw: TAccountMetas[1];
    validatorList: TAccountMetas[2];
    reserveStake: TAccountMetas[3];
    managerFee: TAccountMetas[4];
    poolMint: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
  };
  data: UpdateStakePoolBalanceInstructionData;
};

export function parseUpdateStakePoolBalanceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateStakePoolBalanceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      withdraw: getNextAccount(),
      validatorList: getNextAccount(),
      reserveStake: getNextAccount(),
      managerFee: getNextAccount(),
      poolMint: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getUpdateStakePoolBalanceInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
