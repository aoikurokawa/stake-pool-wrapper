/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_STAKE_POOL_BALANCE_DISCRIMINATOR = new Uint8Array([
  238, 181, 59, 245, 177, 236, 231, 88,
]);

export function getUpdateStakePoolBalanceDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_STAKE_POOL_BALANCE_DISCRIMINATOR
  );
}

export type UpdateStakePoolBalanceInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountWithdrawAuthority extends string | IAccountMeta<string> = string,
  TAccountValidatorListStorage extends string | IAccountMeta<string> = string,
  TAccountReserveStake extends string | IAccountMeta<string> = string,
  TAccountManagerFeeAccount extends string | IAccountMeta<string> = string,
  TAccountStakePoolMint extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorListStorage extends string
        ? WritableAccount<TAccountValidatorListStorage>
        : TAccountValidatorListStorage,
      TAccountReserveStake extends string
        ? ReadonlyAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountManagerFeeAccount extends string
        ? WritableAccount<TAccountManagerFeeAccount>
        : TAccountManagerFeeAccount,
      TAccountStakePoolMint extends string
        ? WritableAccount<TAccountStakePoolMint>
        : TAccountStakePoolMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateStakePoolBalanceInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type UpdateStakePoolBalanceInstructionDataArgs = {};

export function getUpdateStakePoolBalanceInstructionDataEncoder(): Encoder<UpdateStakePoolBalanceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: UPDATE_STAKE_POOL_BALANCE_DISCRIMINATOR,
    })
  );
}

export function getUpdateStakePoolBalanceInstructionDataDecoder(): Decoder<UpdateStakePoolBalanceInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getUpdateStakePoolBalanceInstructionDataCodec(): Codec<
  UpdateStakePoolBalanceInstructionDataArgs,
  UpdateStakePoolBalanceInstructionData
> {
  return combineCodec(
    getUpdateStakePoolBalanceInstructionDataEncoder(),
    getUpdateStakePoolBalanceInstructionDataDecoder()
  );
}

export type UpdateStakePoolBalanceInput<
  TAccountStakePool extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorListStorage extends string = string,
  TAccountReserveStake extends string = string,
  TAccountManagerFeeAccount extends string = string,
  TAccountStakePoolMint extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorListStorage: Address<TAccountValidatorListStorage>;
  reserveStake: Address<TAccountReserveStake>;
  managerFeeAccount: Address<TAccountManagerFeeAccount>;
  stakePoolMint: Address<TAccountStakePoolMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getUpdateStakePoolBalanceInstruction<
  TAccountStakePool extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorListStorage extends string,
  TAccountReserveStake extends string,
  TAccountManagerFeeAccount extends string,
  TAccountStakePoolMint extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: UpdateStakePoolBalanceInput<
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorListStorage,
    TAccountReserveStake,
    TAccountManagerFeeAccount,
    TAccountStakePoolMint,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateStakePoolBalanceInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountWithdrawAuthority,
  TAccountValidatorListStorage,
  TAccountReserveStake,
  TAccountManagerFeeAccount,
  TAccountStakePoolMint,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorListStorage: {
      value: input.validatorListStorage ?? null,
      isWritable: true,
    },
    reserveStake: { value: input.reserveStake ?? null, isWritable: false },
    managerFeeAccount: {
      value: input.managerFeeAccount ?? null,
      isWritable: true,
    },
    stakePoolMint: { value: input.stakePoolMint ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorListStorage),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.managerFeeAccount),
      getAccountMeta(accounts.stakePoolMint),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getUpdateStakePoolBalanceInstructionDataEncoder().encode({}),
  } as UpdateStakePoolBalanceInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorListStorage,
    TAccountReserveStake,
    TAccountManagerFeeAccount,
    TAccountStakePoolMint,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedUpdateStakePoolBalanceInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    withdrawAuthority: TAccountMetas[1];
    validatorListStorage: TAccountMetas[2];
    reserveStake: TAccountMetas[3];
    managerFeeAccount: TAccountMetas[4];
    stakePoolMint: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
  };
  data: UpdateStakePoolBalanceInstructionData;
};

export function parseUpdateStakePoolBalanceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateStakePoolBalanceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorListStorage: getNextAccount(),
      reserveStake: getNextAccount(),
      managerFeeAccount: getNextAccount(),
      stakePoolMint: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getUpdateStakePoolBalanceInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
