/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getPreferredValidatorTypeDecoder,
  getPreferredValidatorTypeEncoder,
  type PreferredValidatorType,
  type PreferredValidatorTypeArgs,
} from '../types';

export const SET_PREFERRED_VALIDATOR_DISCRIMINATOR = new Uint8Array([
  114, 42, 19, 98, 212, 97, 109, 13,
]);

export function getSetPreferredValidatorDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_PREFERRED_VALIDATOR_DISCRIMINATOR
  );
}

export type SetPreferredValidatorInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePoolAddress extends string | IAccountMeta<string> = string,
  TAccountStaker extends string | IAccountMeta<string> = string,
  TAccountValidatorListAddress extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePoolAddress extends string
        ? WritableAccount<TAccountStakePoolAddress>
        : TAccountStakePoolAddress,
      TAccountStaker extends string
        ? ReadonlySignerAccount<TAccountStaker> &
            IAccountSignerMeta<TAccountStaker>
        : TAccountStaker,
      TAccountValidatorListAddress extends string
        ? ReadonlyAccount<TAccountValidatorListAddress>
        : TAccountValidatorListAddress,
      ...TRemainingAccounts,
    ]
  >;

export type SetPreferredValidatorInstructionData = {
  discriminator: ReadonlyUint8Array;
  validatorType: PreferredValidatorType;
  validatorVoteAddress: Option<Address>;
};

export type SetPreferredValidatorInstructionDataArgs = {
  validatorType: PreferredValidatorTypeArgs;
  validatorVoteAddress: OptionOrNullable<Address>;
};

export function getSetPreferredValidatorInstructionDataEncoder(): Encoder<SetPreferredValidatorInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['validatorType', getPreferredValidatorTypeEncoder()],
      ['validatorVoteAddress', getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_PREFERRED_VALIDATOR_DISCRIMINATOR,
    })
  );
}

export function getSetPreferredValidatorInstructionDataDecoder(): Decoder<SetPreferredValidatorInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['validatorType', getPreferredValidatorTypeDecoder()],
    ['validatorVoteAddress', getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getSetPreferredValidatorInstructionDataCodec(): Codec<
  SetPreferredValidatorInstructionDataArgs,
  SetPreferredValidatorInstructionData
> {
  return combineCodec(
    getSetPreferredValidatorInstructionDataEncoder(),
    getSetPreferredValidatorInstructionDataDecoder()
  );
}

export type SetPreferredValidatorInput<
  TAccountStakePoolAddress extends string = string,
  TAccountStaker extends string = string,
  TAccountValidatorListAddress extends string = string,
> = {
  stakePoolAddress: Address<TAccountStakePoolAddress>;
  staker: TransactionSigner<TAccountStaker>;
  validatorListAddress: Address<TAccountValidatorListAddress>;
  validatorType: SetPreferredValidatorInstructionDataArgs['validatorType'];
  validatorVoteAddress: SetPreferredValidatorInstructionDataArgs['validatorVoteAddress'];
};

export function getSetPreferredValidatorInstruction<
  TAccountStakePoolAddress extends string,
  TAccountStaker extends string,
  TAccountValidatorListAddress extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: SetPreferredValidatorInput<
    TAccountStakePoolAddress,
    TAccountStaker,
    TAccountValidatorListAddress
  >,
  config?: { programAddress?: TProgramAddress }
): SetPreferredValidatorInstruction<
  TProgramAddress,
  TAccountStakePoolAddress,
  TAccountStaker,
  TAccountValidatorListAddress
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePoolAddress: {
      value: input.stakePoolAddress ?? null,
      isWritable: true,
    },
    staker: { value: input.staker ?? null, isWritable: false },
    validatorListAddress: {
      value: input.validatorListAddress ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePoolAddress),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.validatorListAddress),
    ],
    programAddress,
    data: getSetPreferredValidatorInstructionDataEncoder().encode(
      args as SetPreferredValidatorInstructionDataArgs
    ),
  } as SetPreferredValidatorInstruction<
    TProgramAddress,
    TAccountStakePoolAddress,
    TAccountStaker,
    TAccountValidatorListAddress
  >;

  return instruction;
}

export type ParsedSetPreferredValidatorInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePoolAddress: TAccountMetas[0];
    staker: TAccountMetas[1];
    validatorListAddress: TAccountMetas[2];
  };
  data: SetPreferredValidatorInstructionData;
};

export function parseSetPreferredValidatorInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetPreferredValidatorInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePoolAddress: getNextAccount(),
      staker: getNextAccount(),
      validatorListAddress: getNextAccount(),
    },
    data: getSetPreferredValidatorInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
