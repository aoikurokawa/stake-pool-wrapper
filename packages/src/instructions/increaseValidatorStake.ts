/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INCREASE_VALIDATOR_STAKE_DISCRIMINATOR = new Uint8Array([
  5, 121, 50, 243, 14, 159, 97, 6,
]);

export function getIncreaseValidatorStakeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INCREASE_VALIDATOR_STAKE_DISCRIMINATOR
  );
}

export type IncreaseValidatorStakeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountStaker extends string | IAccountMeta<string> = string,
  TAccountStakePoolWithdrawAuthority extends
    | string
    | IAccountMeta<string> = string,
  TAccountValidatorList extends string | IAccountMeta<string> = string,
  TAccountReserveStake extends string | IAccountMeta<string> = string,
  TAccountTransientStake extends string | IAccountMeta<string> = string,
  TAccountValidatorStake extends string | IAccountMeta<string> = string,
  TAccountValidator extends string | IAccountMeta<string> = string,
  TAccountClock extends string | IAccountMeta<string> = string,
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountSysvarStakeHistory extends
    | string
    | IAccountMeta<string> = 'SysvarStakeHistory1111111111111111111111111',
  TAccountStakeConfig extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountStakeProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStaker extends string
        ? ReadonlySignerAccount<TAccountStaker> &
            IAccountSignerMeta<TAccountStaker>
        : TAccountStaker,
      TAccountStakePoolWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountStakePoolWithdrawAuthority>
        : TAccountStakePoolWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountReserveStake extends string
        ? WritableAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountTransientStake extends string
        ? WritableAccount<TAccountTransientStake>
        : TAccountTransientStake,
      TAccountValidatorStake extends string
        ? ReadonlyAccount<TAccountValidatorStake>
        : TAccountValidatorStake,
      TAccountValidator extends string
        ? ReadonlyAccount<TAccountValidator>
        : TAccountValidator,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountSysvarStakeHistory extends string
        ? ReadonlyAccount<TAccountSysvarStakeHistory>
        : TAccountSysvarStakeHistory,
      TAccountStakeConfig extends string
        ? ReadonlyAccount<TAccountStakeConfig>
        : TAccountStakeConfig,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export type IncreaseValidatorStakeInstructionData = {
  discriminator: ReadonlyUint8Array;
  lamports: bigint;
  transientStakeSeed: bigint;
};

export type IncreaseValidatorStakeInstructionDataArgs = {
  lamports: number | bigint;
  transientStakeSeed: number | bigint;
};

export function getIncreaseValidatorStakeInstructionDataEncoder(): Encoder<IncreaseValidatorStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['lamports', getU64Encoder()],
      ['transientStakeSeed', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INCREASE_VALIDATOR_STAKE_DISCRIMINATOR,
    })
  );
}

export function getIncreaseValidatorStakeInstructionDataDecoder(): Decoder<IncreaseValidatorStakeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['lamports', getU64Decoder()],
    ['transientStakeSeed', getU64Decoder()],
  ]);
}

export function getIncreaseValidatorStakeInstructionDataCodec(): Codec<
  IncreaseValidatorStakeInstructionDataArgs,
  IncreaseValidatorStakeInstructionData
> {
  return combineCodec(
    getIncreaseValidatorStakeInstructionDataEncoder(),
    getIncreaseValidatorStakeInstructionDataDecoder()
  );
}

export type IncreaseValidatorStakeInput<
  TAccountStakePool extends string = string,
  TAccountStaker extends string = string,
  TAccountStakePoolWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountTransientStake extends string = string,
  TAccountValidatorStake extends string = string,
  TAccountValidator extends string = string,
  TAccountClock extends string = string,
  TAccountRent extends string = string,
  TAccountSysvarStakeHistory extends string = string,
  TAccountStakeConfig extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  staker: TransactionSigner<TAccountStaker>;
  stakePoolWithdrawAuthority: Address<TAccountStakePoolWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  transientStake: Address<TAccountTransientStake>;
  validatorStake: Address<TAccountValidatorStake>;
  validator: Address<TAccountValidator>;
  clock: Address<TAccountClock>;
  rent?: Address<TAccountRent>;
  sysvarStakeHistory?: Address<TAccountSysvarStakeHistory>;
  stakeConfig: Address<TAccountStakeConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeProgram: Address<TAccountStakeProgram>;
  lamports: IncreaseValidatorStakeInstructionDataArgs['lamports'];
  transientStakeSeed: IncreaseValidatorStakeInstructionDataArgs['transientStakeSeed'];
};

export function getIncreaseValidatorStakeInstruction<
  TAccountStakePool extends string,
  TAccountStaker extends string,
  TAccountStakePoolWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountTransientStake extends string,
  TAccountValidatorStake extends string,
  TAccountValidator extends string,
  TAccountClock extends string,
  TAccountRent extends string,
  TAccountSysvarStakeHistory extends string,
  TAccountStakeConfig extends string,
  TAccountSystemProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: IncreaseValidatorStakeInput<
    TAccountStakePool,
    TAccountStaker,
    TAccountStakePoolWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountTransientStake,
    TAccountValidatorStake,
    TAccountValidator,
    TAccountClock,
    TAccountRent,
    TAccountSysvarStakeHistory,
    TAccountStakeConfig,
    TAccountSystemProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): IncreaseValidatorStakeInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountStaker,
  TAccountStakePoolWithdrawAuthority,
  TAccountValidatorList,
  TAccountReserveStake,
  TAccountTransientStake,
  TAccountValidatorStake,
  TAccountValidator,
  TAccountClock,
  TAccountRent,
  TAccountSysvarStakeHistory,
  TAccountStakeConfig,
  TAccountSystemProgram,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    staker: { value: input.staker ?? null, isWritable: false },
    stakePoolWithdrawAuthority: {
      value: input.stakePoolWithdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    transientStake: { value: input.transientStake ?? null, isWritable: true },
    validatorStake: { value: input.validatorStake ?? null, isWritable: false },
    validator: { value: input.validator ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    sysvarStakeHistory: {
      value: input.sysvarStakeHistory ?? null,
      isWritable: false,
    },
    stakeConfig: { value: input.stakeConfig ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.sysvarStakeHistory.value) {
    accounts.sysvarStakeHistory.value =
      'SysvarStakeHistory1111111111111111111111111' as Address<'SysvarStakeHistory1111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.stakePoolWithdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.transientStake),
      getAccountMeta(accounts.validatorStake),
      getAccountMeta(accounts.validator),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.sysvarStakeHistory),
      getAccountMeta(accounts.stakeConfig),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    programAddress,
    data: getIncreaseValidatorStakeInstructionDataEncoder().encode(
      args as IncreaseValidatorStakeInstructionDataArgs
    ),
  } as IncreaseValidatorStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountStakePoolWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountTransientStake,
    TAccountValidatorStake,
    TAccountValidator,
    TAccountClock,
    TAccountRent,
    TAccountSysvarStakeHistory,
    TAccountStakeConfig,
    TAccountSystemProgram,
    TAccountStakeProgram
  >;

  return instruction;
}

export type ParsedIncreaseValidatorStakeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    staker: TAccountMetas[1];
    stakePoolWithdrawAuthority: TAccountMetas[2];
    validatorList: TAccountMetas[3];
    reserveStake: TAccountMetas[4];
    transientStake: TAccountMetas[5];
    validatorStake: TAccountMetas[6];
    validator: TAccountMetas[7];
    clock: TAccountMetas[8];
    rent: TAccountMetas[9];
    sysvarStakeHistory: TAccountMetas[10];
    stakeConfig: TAccountMetas[11];
    systemProgram: TAccountMetas[12];
    stakeProgram: TAccountMetas[13];
  };
  data: IncreaseValidatorStakeInstructionData;
};

export function parseIncreaseValidatorStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedIncreaseValidatorStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      staker: getNextAccount(),
      stakePoolWithdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      reserveStake: getNextAccount(),
      transientStake: getNextAccount(),
      validatorStake: getNextAccount(),
      validator: getNextAccount(),
      clock: getNextAccount(),
      rent: getNextAccount(),
      sysvarStakeHistory: getNextAccount(),
      stakeConfig: getNextAccount(),
      systemProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getIncreaseValidatorStakeInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
