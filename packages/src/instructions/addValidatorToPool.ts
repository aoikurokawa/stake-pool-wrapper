/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADD_VALIDATOR_TO_POOL_DISCRIMINATOR = 1;

export function getAddValidatorToPoolDiscriminatorBytes() {
  return getU8Encoder().encode(ADD_VALIDATOR_TO_POOL_DISCRIMINATOR);
}

export type AddValidatorToPoolInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountStaker extends string | IAccountMeta<string> = string,
  TAccountReserveStake extends string | IAccountMeta<string> = string,
  TAccountWithdrawAuthority extends string | IAccountMeta<string> = string,
  TAccountValidatorList extends string | IAccountMeta<string> = string,
  TAccountStake extends string | IAccountMeta<string> = string,
  TAccountValidatorVote extends string | IAccountMeta<string> = string,
  TAccountRent extends string | IAccountMeta<string> = string,
  TAccountClock extends string | IAccountMeta<string> = string,
  TAccountStakeHistory extends string | IAccountMeta<string> = string,
  TAccountStakeConfig extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends string | IAccountMeta<string> = string,
  TAccountStakeProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStaker extends string
        ? ReadonlySignerAccount<TAccountStaker> &
            IAccountSignerMeta<TAccountStaker>
        : TAccountStaker,
      TAccountReserveStake extends string
        ? WritableAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountStake extends string
        ? WritableAccount<TAccountStake>
        : TAccountStake,
      TAccountValidatorVote extends string
        ? ReadonlyAccount<TAccountValidatorVote>
        : TAccountValidatorVote,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountStakeHistory extends string
        ? ReadonlyAccount<TAccountStakeHistory>
        : TAccountStakeHistory,
      TAccountStakeConfig extends string
        ? ReadonlyAccount<TAccountStakeConfig>
        : TAccountStakeConfig,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AddValidatorToPoolInstructionData = {
  discriminator: number;
  args: number;
};

export type AddValidatorToPoolInstructionDataArgs = { args: number };

export function getAddValidatorToPoolInstructionDataEncoder(): Encoder<AddValidatorToPoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['args', getU32Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: ADD_VALIDATOR_TO_POOL_DISCRIMINATOR,
    })
  );
}

export function getAddValidatorToPoolInstructionDataDecoder(): Decoder<AddValidatorToPoolInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['args', getU32Decoder()],
  ]);
}

export function getAddValidatorToPoolInstructionDataCodec(): Codec<
  AddValidatorToPoolInstructionDataArgs,
  AddValidatorToPoolInstructionData
> {
  return combineCodec(
    getAddValidatorToPoolInstructionDataEncoder(),
    getAddValidatorToPoolInstructionDataDecoder()
  );
}

export type AddValidatorToPoolInput<
  TAccountStakePool extends string = string,
  TAccountStaker extends string = string,
  TAccountReserveStake extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountStake extends string = string,
  TAccountValidatorVote extends string = string,
  TAccountRent extends string = string,
  TAccountClock extends string = string,
  TAccountStakeHistory extends string = string,
  TAccountStakeConfig extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  staker: TransactionSigner<TAccountStaker>;
  reserveStake: Address<TAccountReserveStake>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  stake: Address<TAccountStake>;
  validatorVote: Address<TAccountValidatorVote>;
  rent: Address<TAccountRent>;
  clock: Address<TAccountClock>;
  stakeHistory: Address<TAccountStakeHistory>;
  stakeConfig: Address<TAccountStakeConfig>;
  systemProgram: Address<TAccountSystemProgram>;
  stakeProgram: Address<TAccountStakeProgram>;
  args: AddValidatorToPoolInstructionDataArgs['args'];
};

export function getAddValidatorToPoolInstruction<
  TAccountStakePool extends string,
  TAccountStaker extends string,
  TAccountReserveStake extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountStake extends string,
  TAccountValidatorVote extends string,
  TAccountRent extends string,
  TAccountClock extends string,
  TAccountStakeHistory extends string,
  TAccountStakeConfig extends string,
  TAccountSystemProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: AddValidatorToPoolInput<
    TAccountStakePool,
    TAccountStaker,
    TAccountReserveStake,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountStake,
    TAccountValidatorVote,
    TAccountRent,
    TAccountClock,
    TAccountStakeHistory,
    TAccountStakeConfig,
    TAccountSystemProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AddValidatorToPoolInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountStaker,
  TAccountReserveStake,
  TAccountWithdrawAuthority,
  TAccountValidatorList,
  TAccountStake,
  TAccountValidatorVote,
  TAccountRent,
  TAccountClock,
  TAccountStakeHistory,
  TAccountStakeConfig,
  TAccountSystemProgram,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    staker: { value: input.staker ?? null, isWritable: false },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    stake: { value: input.stake ?? null, isWritable: true },
    validatorVote: { value: input.validatorVote ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },
    stakeConfig: { value: input.stakeConfig ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.stake),
      getAccountMeta(accounts.validatorVote),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.stakeHistory),
      getAccountMeta(accounts.stakeConfig),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    programAddress,
    data: getAddValidatorToPoolInstructionDataEncoder().encode(
      args as AddValidatorToPoolInstructionDataArgs
    ),
  } as AddValidatorToPoolInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountReserveStake,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountStake,
    TAccountValidatorVote,
    TAccountRent,
    TAccountClock,
    TAccountStakeHistory,
    TAccountStakeConfig,
    TAccountSystemProgram,
    TAccountStakeProgram
  >;

  return instruction;
}

export type ParsedAddValidatorToPoolInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    staker: TAccountMetas[1];
    reserveStake: TAccountMetas[2];
    withdrawAuthority: TAccountMetas[3];
    validatorList: TAccountMetas[4];
    stake: TAccountMetas[5];
    validatorVote: TAccountMetas[6];
    rent: TAccountMetas[7];
    clock: TAccountMetas[8];
    stakeHistory: TAccountMetas[9];
    stakeConfig: TAccountMetas[10];
    systemProgram: TAccountMetas[11];
    stakeProgram: TAccountMetas[12];
  };
  data: AddValidatorToPoolInstructionData;
};

export function parseAddValidatorToPoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAddValidatorToPoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      staker: getNextAccount(),
      reserveStake: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      stake: getNextAccount(),
      validatorVote: getNextAccount(),
      rent: getNextAccount(),
      clock: getNextAccount(),
      stakeHistory: getNextAccount(),
      stakeConfig: getNextAccount(),
      systemProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getAddValidatorToPoolInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
