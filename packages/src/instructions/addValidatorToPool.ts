/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADD_VALIDATOR_TO_POOL_DISCRIMINATOR = new Uint8Array([
  181, 6, 29, 25, 192, 211, 190, 187,
]);

export function getAddValidatorToPoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_VALIDATOR_TO_POOL_DISCRIMINATOR
  );
}

export type AddValidatorToPoolInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountStaker extends string | IAccountMeta<string> = string,
  TAccountFunder extends string | IAccountMeta<string> = string,
  TAccountStakePoolWithdraw extends string | IAccountMeta<string> = string,
  TAccountValidatorList extends string | IAccountMeta<string> = string,
  TAccountStake extends string | IAccountMeta<string> = string,
  TAccountValidator extends string | IAccountMeta<string> = string,
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountClock extends string | IAccountMeta<string> = string,
  TAccountSysvarStakeHistory extends
    | string
    | IAccountMeta<string> = 'SysvarStakeHistory1111111111111111111111111',
  TAccountStakeConfig extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountStakeProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStaker extends string
        ? ReadonlySignerAccount<TAccountStaker> &
            IAccountSignerMeta<TAccountStaker>
        : TAccountStaker,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            IAccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountStakePoolWithdraw extends string
        ? ReadonlyAccount<TAccountStakePoolWithdraw>
        : TAccountStakePoolWithdraw,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountStake extends string
        ? WritableAccount<TAccountStake>
        : TAccountStake,
      TAccountValidator extends string
        ? ReadonlyAccount<TAccountValidator>
        : TAccountValidator,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountSysvarStakeHistory extends string
        ? ReadonlyAccount<TAccountSysvarStakeHistory>
        : TAccountSysvarStakeHistory,
      TAccountStakeConfig extends string
        ? ReadonlyAccount<TAccountStakeConfig>
        : TAccountStakeConfig,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AddValidatorToPoolInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type AddValidatorToPoolInstructionDataArgs = {};

export function getAddValidatorToPoolInstructionDataEncoder(): Encoder<AddValidatorToPoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: ADD_VALIDATOR_TO_POOL_DISCRIMINATOR,
    })
  );
}

export function getAddValidatorToPoolInstructionDataDecoder(): Decoder<AddValidatorToPoolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getAddValidatorToPoolInstructionDataCodec(): Codec<
  AddValidatorToPoolInstructionDataArgs,
  AddValidatorToPoolInstructionData
> {
  return combineCodec(
    getAddValidatorToPoolInstructionDataEncoder(),
    getAddValidatorToPoolInstructionDataDecoder()
  );
}

export type AddValidatorToPoolInput<
  TAccountStakePool extends string = string,
  TAccountStaker extends string = string,
  TAccountFunder extends string = string,
  TAccountStakePoolWithdraw extends string = string,
  TAccountValidatorList extends string = string,
  TAccountStake extends string = string,
  TAccountValidator extends string = string,
  TAccountRent extends string = string,
  TAccountClock extends string = string,
  TAccountSysvarStakeHistory extends string = string,
  TAccountStakeConfig extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  staker: TransactionSigner<TAccountStaker>;
  funder: TransactionSigner<TAccountFunder>;
  stakePoolWithdraw: Address<TAccountStakePoolWithdraw>;
  validatorList: Address<TAccountValidatorList>;
  stake: Address<TAccountStake>;
  validator: Address<TAccountValidator>;
  rent?: Address<TAccountRent>;
  clock: Address<TAccountClock>;
  sysvarStakeHistory?: Address<TAccountSysvarStakeHistory>;
  stakeConfig: Address<TAccountStakeConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeProgram: Address<TAccountStakeProgram>;
};

export function getAddValidatorToPoolInstruction<
  TAccountStakePool extends string,
  TAccountStaker extends string,
  TAccountFunder extends string,
  TAccountStakePoolWithdraw extends string,
  TAccountValidatorList extends string,
  TAccountStake extends string,
  TAccountValidator extends string,
  TAccountRent extends string,
  TAccountClock extends string,
  TAccountSysvarStakeHistory extends string,
  TAccountStakeConfig extends string,
  TAccountSystemProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: AddValidatorToPoolInput<
    TAccountStakePool,
    TAccountStaker,
    TAccountFunder,
    TAccountStakePoolWithdraw,
    TAccountValidatorList,
    TAccountStake,
    TAccountValidator,
    TAccountRent,
    TAccountClock,
    TAccountSysvarStakeHistory,
    TAccountStakeConfig,
    TAccountSystemProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AddValidatorToPoolInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountStaker,
  TAccountFunder,
  TAccountStakePoolWithdraw,
  TAccountValidatorList,
  TAccountStake,
  TAccountValidator,
  TAccountRent,
  TAccountClock,
  TAccountSysvarStakeHistory,
  TAccountStakeConfig,
  TAccountSystemProgram,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    staker: { value: input.staker ?? null, isWritable: false },
    funder: { value: input.funder ?? null, isWritable: true },
    stakePoolWithdraw: {
      value: input.stakePoolWithdraw ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    stake: { value: input.stake ?? null, isWritable: true },
    validator: { value: input.validator ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
    sysvarStakeHistory: {
      value: input.sysvarStakeHistory ?? null,
      isWritable: false,
    },
    stakeConfig: { value: input.stakeConfig ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.sysvarStakeHistory.value) {
    accounts.sysvarStakeHistory.value =
      'SysvarStakeHistory1111111111111111111111111' as Address<'SysvarStakeHistory1111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.stakePoolWithdraw),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.stake),
      getAccountMeta(accounts.validator),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.sysvarStakeHistory),
      getAccountMeta(accounts.stakeConfig),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    programAddress,
    data: getAddValidatorToPoolInstructionDataEncoder().encode({}),
  } as AddValidatorToPoolInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountFunder,
    TAccountStakePoolWithdraw,
    TAccountValidatorList,
    TAccountStake,
    TAccountValidator,
    TAccountRent,
    TAccountClock,
    TAccountSysvarStakeHistory,
    TAccountStakeConfig,
    TAccountSystemProgram,
    TAccountStakeProgram
  >;

  return instruction;
}

export type ParsedAddValidatorToPoolInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    staker: TAccountMetas[1];
    funder: TAccountMetas[2];
    stakePoolWithdraw: TAccountMetas[3];
    validatorList: TAccountMetas[4];
    stake: TAccountMetas[5];
    validator: TAccountMetas[6];
    rent: TAccountMetas[7];
    clock: TAccountMetas[8];
    sysvarStakeHistory: TAccountMetas[9];
    stakeConfig: TAccountMetas[10];
    systemProgram: TAccountMetas[11];
    stakeProgram: TAccountMetas[12];
  };
  data: AddValidatorToPoolInstructionData;
};

export function parseAddValidatorToPoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAddValidatorToPoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      staker: getNextAccount(),
      funder: getNextAccount(),
      stakePoolWithdraw: getNextAccount(),
      validatorList: getNextAccount(),
      stake: getNextAccount(),
      validator: getNextAccount(),
      rent: getNextAccount(),
      clock: getNextAccount(),
      sysvarStakeHistory: getNextAccount(),
      stakeConfig: getNextAccount(),
      systemProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getAddValidatorToPoolInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
