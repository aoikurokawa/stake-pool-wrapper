/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLEANUP_REMOVED_VALIDATOR_ENTRIES_DISCRIMINATOR = 8;

export function getCleanupRemovedValidatorEntriesDiscriminatorBytes() {
  return getU8Encoder().encode(CLEANUP_REMOVED_VALIDATOR_ENTRIES_DISCRIMINATOR);
}

export type CleanupRemovedValidatorEntriesInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountValidatorList extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      ...TRemainingAccounts,
    ]
  >;

export type CleanupRemovedValidatorEntriesInstructionData = {
  discriminator: number;
};

export type CleanupRemovedValidatorEntriesInstructionDataArgs = {};

export function getCleanupRemovedValidatorEntriesInstructionDataEncoder(): Encoder<CleanupRemovedValidatorEntriesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: CLEANUP_REMOVED_VALIDATOR_ENTRIES_DISCRIMINATOR,
    })
  );
}

export function getCleanupRemovedValidatorEntriesInstructionDataDecoder(): Decoder<CleanupRemovedValidatorEntriesInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getCleanupRemovedValidatorEntriesInstructionDataCodec(): Codec<
  CleanupRemovedValidatorEntriesInstructionDataArgs,
  CleanupRemovedValidatorEntriesInstructionData
> {
  return combineCodec(
    getCleanupRemovedValidatorEntriesInstructionDataEncoder(),
    getCleanupRemovedValidatorEntriesInstructionDataDecoder()
  );
}

export type CleanupRemovedValidatorEntriesInput<
  TAccountStakePool extends string = string,
  TAccountValidatorList extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  validatorList: Address<TAccountValidatorList>;
};

export function getCleanupRemovedValidatorEntriesInstruction<
  TAccountStakePool extends string,
  TAccountValidatorList extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: CleanupRemovedValidatorEntriesInput<
    TAccountStakePool,
    TAccountValidatorList
  >,
  config?: { programAddress?: TProgramAddress }
): CleanupRemovedValidatorEntriesInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountValidatorList
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.validatorList),
    ],
    programAddress,
    data: getCleanupRemovedValidatorEntriesInstructionDataEncoder().encode({}),
  } as CleanupRemovedValidatorEntriesInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountValidatorList
  >;

  return instruction;
}

export type ParsedCleanupRemovedValidatorEntriesInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    validatorList: TAccountMetas[1];
  };
  data: CleanupRemovedValidatorEntriesInstructionData;
};

export function parseCleanupRemovedValidatorEntriesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCleanupRemovedValidatorEntriesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      validatorList: getNextAccount(),
    },
    data: getCleanupRemovedValidatorEntriesInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
