/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DEPOSIT_SOL_DISCRIMINATOR = 14;

export function getDepositSolDiscriminatorBytes() {
  return getU8Encoder().encode(DEPOSIT_SOL_DISCRIMINATOR);
}

export type DepositSolInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountWithdrawAuthority extends string | IAccountMeta<string> = string,
  TAccountReserveStakeAccount extends string | IAccountMeta<string> = string,
  TAccountFromUserLamports extends string | IAccountMeta<string> = string,
  TAccountDestUserPool extends string | IAccountMeta<string> = string,
  TAccountManagerFee extends string | IAccountMeta<string> = string,
  TAccountReferrerFee extends string | IAccountMeta<string> = string,
  TAccountPoolMint extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountReserveStakeAccount extends string
        ? WritableAccount<TAccountReserveStakeAccount>
        : TAccountReserveStakeAccount,
      TAccountFromUserLamports extends string
        ? ReadonlySignerAccount<TAccountFromUserLamports> &
            IAccountSignerMeta<TAccountFromUserLamports>
        : TAccountFromUserLamports,
      TAccountDestUserPool extends string
        ? WritableAccount<TAccountDestUserPool>
        : TAccountDestUserPool,
      TAccountManagerFee extends string
        ? WritableAccount<TAccountManagerFee>
        : TAccountManagerFee,
      TAccountReferrerFee extends string
        ? WritableAccount<TAccountReferrerFee>
        : TAccountReferrerFee,
      TAccountPoolMint extends string
        ? WritableAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DepositSolInstructionData = { discriminator: number; args: bigint };

export type DepositSolInstructionDataArgs = { args: number | bigint };

export function getDepositSolInstructionDataEncoder(): Encoder<DepositSolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['args', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: DEPOSIT_SOL_DISCRIMINATOR })
  );
}

export function getDepositSolInstructionDataDecoder(): Decoder<DepositSolInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['args', getU64Decoder()],
  ]);
}

export function getDepositSolInstructionDataCodec(): Codec<
  DepositSolInstructionDataArgs,
  DepositSolInstructionData
> {
  return combineCodec(
    getDepositSolInstructionDataEncoder(),
    getDepositSolInstructionDataDecoder()
  );
}

export type DepositSolInput<
  TAccountStakePool extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountReserveStakeAccount extends string = string,
  TAccountFromUserLamports extends string = string,
  TAccountDestUserPool extends string = string,
  TAccountManagerFee extends string = string,
  TAccountReferrerFee extends string = string,
  TAccountPoolMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  reserveStakeAccount: Address<TAccountReserveStakeAccount>;
  fromUserLamports: TransactionSigner<TAccountFromUserLamports>;
  destUserPool: Address<TAccountDestUserPool>;
  managerFee: Address<TAccountManagerFee>;
  referrerFee: Address<TAccountReferrerFee>;
  poolMint: Address<TAccountPoolMint>;
  systemProgram: Address<TAccountSystemProgram>;
  tokenProgram: Address<TAccountTokenProgram>;
  args: DepositSolInstructionDataArgs['args'];
};

export function getDepositSolInstruction<
  TAccountStakePool extends string,
  TAccountWithdrawAuthority extends string,
  TAccountReserveStakeAccount extends string,
  TAccountFromUserLamports extends string,
  TAccountDestUserPool extends string,
  TAccountManagerFee extends string,
  TAccountReferrerFee extends string,
  TAccountPoolMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: DepositSolInput<
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountReserveStakeAccount,
    TAccountFromUserLamports,
    TAccountDestUserPool,
    TAccountManagerFee,
    TAccountReferrerFee,
    TAccountPoolMint,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DepositSolInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountWithdrawAuthority,
  TAccountReserveStakeAccount,
  TAccountFromUserLamports,
  TAccountDestUserPool,
  TAccountManagerFee,
  TAccountReferrerFee,
  TAccountPoolMint,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    reserveStakeAccount: {
      value: input.reserveStakeAccount ?? null,
      isWritable: true,
    },
    fromUserLamports: {
      value: input.fromUserLamports ?? null,
      isWritable: false,
    },
    destUserPool: { value: input.destUserPool ?? null, isWritable: true },
    managerFee: { value: input.managerFee ?? null, isWritable: true },
    referrerFee: { value: input.referrerFee ?? null, isWritable: true },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.reserveStakeAccount),
      getAccountMeta(accounts.fromUserLamports),
      getAccountMeta(accounts.destUserPool),
      getAccountMeta(accounts.managerFee),
      getAccountMeta(accounts.referrerFee),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getDepositSolInstructionDataEncoder().encode(
      args as DepositSolInstructionDataArgs
    ),
  } as DepositSolInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountReserveStakeAccount,
    TAccountFromUserLamports,
    TAccountDestUserPool,
    TAccountManagerFee,
    TAccountReferrerFee,
    TAccountPoolMint,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedDepositSolInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    withdrawAuthority: TAccountMetas[1];
    reserveStakeAccount: TAccountMetas[2];
    fromUserLamports: TAccountMetas[3];
    destUserPool: TAccountMetas[4];
    managerFee: TAccountMetas[5];
    referrerFee: TAccountMetas[6];
    poolMint: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
  };
  data: DepositSolInstructionData;
};

export function parseDepositSolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDepositSolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      reserveStakeAccount: getNextAccount(),
      fromUserLamports: getNextAccount(),
      destUserPool: getNextAccount(),
      managerFee: getNextAccount(),
      referrerFee: getNextAccount(),
      poolMint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getDepositSolInstructionDataDecoder().decode(instruction.data),
  };
}
