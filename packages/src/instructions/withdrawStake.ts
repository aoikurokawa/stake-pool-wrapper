/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const WITHDRAW_STAKE_DISCRIMINATOR = 10;

export function getWithdrawStakeDiscriminatorBytes() {
  return getU8Encoder().encode(WITHDRAW_STAKE_DISCRIMINATOR);
}

export type WithdrawStakeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountValidatorList extends string | IAccountMeta<string> = string,
  TAccountWithdrawAuthority extends string | IAccountMeta<string> = string,
  TAccountStakeSplitFrom extends string | IAccountMeta<string> = string,
  TAccountStakeSplitTo extends string | IAccountMeta<string> = string,
  TAccountUserStakeAuthority extends string | IAccountMeta<string> = string,
  TAccountUserTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountBurnFromPool extends string | IAccountMeta<string> = string,
  TAccountManagerFee extends string | IAccountMeta<string> = string,
  TAccountPoolMint extends string | IAccountMeta<string> = string,
  TAccountClock extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends string | IAccountMeta<string> = string,
  TAccountStakeProgram extends string | IAccountMeta<string> = string,
  TAccountStakeProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountStakeSplitFrom extends string
        ? WritableAccount<TAccountStakeSplitFrom>
        : TAccountStakeSplitFrom,
      TAccountStakeSplitTo extends string
        ? WritableAccount<TAccountStakeSplitTo>
        : TAccountStakeSplitTo,
      TAccountUserStakeAuthority extends string
        ? ReadonlyAccount<TAccountUserStakeAuthority>
        : TAccountUserStakeAuthority,
      TAccountUserTransferAuthority extends string
        ? ReadonlySignerAccount<TAccountUserTransferAuthority> &
            IAccountSignerMeta<TAccountUserTransferAuthority>
        : TAccountUserTransferAuthority,
      TAccountBurnFromPool extends string
        ? WritableAccount<TAccountBurnFromPool>
        : TAccountBurnFromPool,
      TAccountManagerFee extends string
        ? WritableAccount<TAccountManagerFee>
        : TAccountManagerFee,
      TAccountPoolMint extends string
        ? WritableAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawStakeInstructionData = {
  discriminator: number;
  args: bigint;
};

export type WithdrawStakeInstructionDataArgs = { args: number | bigint };

export function getWithdrawStakeInstructionDataEncoder(): Encoder<WithdrawStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['args', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WITHDRAW_STAKE_DISCRIMINATOR })
  );
}

export function getWithdrawStakeInstructionDataDecoder(): Decoder<WithdrawStakeInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['args', getU64Decoder()],
  ]);
}

export function getWithdrawStakeInstructionDataCodec(): Codec<
  WithdrawStakeInstructionDataArgs,
  WithdrawStakeInstructionData
> {
  return combineCodec(
    getWithdrawStakeInstructionDataEncoder(),
    getWithdrawStakeInstructionDataDecoder()
  );
}

export type WithdrawStakeInput<
  TAccountStakePool extends string = string,
  TAccountValidatorList extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountStakeSplitFrom extends string = string,
  TAccountStakeSplitTo extends string = string,
  TAccountUserStakeAuthority extends string = string,
  TAccountUserTransferAuthority extends string = string,
  TAccountBurnFromPool extends string = string,
  TAccountManagerFee extends string = string,
  TAccountPoolMint extends string = string,
  TAccountClock extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountStakeProgram extends string = string,
  TAccountStakeProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  validatorList: Address<TAccountValidatorList>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  stakeSplitFrom: Address<TAccountStakeSplitFrom>;
  stakeSplitTo: Address<TAccountStakeSplitTo>;
  userStakeAuthority: Address<TAccountUserStakeAuthority>;
  userTransferAuthority: TransactionSigner<TAccountUserTransferAuthority>;
  burnFromPool: Address<TAccountBurnFromPool>;
  managerFee: Address<TAccountManagerFee>;
  poolMint: Address<TAccountPoolMint>;
  clock: Address<TAccountClock>;
  tokenProgram: Address<TAccountTokenProgram>;
  stakeProgram: Address<TAccountStakeProgram>;
  stakeProgram: Address<TAccountStakeProgram>;
  args: WithdrawStakeInstructionDataArgs['args'];
};

export function getWithdrawStakeInstruction<
  TAccountStakePool extends string,
  TAccountValidatorList extends string,
  TAccountWithdrawAuthority extends string,
  TAccountStakeSplitFrom extends string,
  TAccountStakeSplitTo extends string,
  TAccountUserStakeAuthority extends string,
  TAccountUserTransferAuthority extends string,
  TAccountBurnFromPool extends string,
  TAccountManagerFee extends string,
  TAccountPoolMint extends string,
  TAccountClock extends string,
  TAccountTokenProgram extends string,
  TAccountStakeProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: WithdrawStakeInput<
    TAccountStakePool,
    TAccountValidatorList,
    TAccountWithdrawAuthority,
    TAccountStakeSplitFrom,
    TAccountStakeSplitTo,
    TAccountUserStakeAuthority,
    TAccountUserTransferAuthority,
    TAccountBurnFromPool,
    TAccountManagerFee,
    TAccountPoolMint,
    TAccountClock,
    TAccountTokenProgram,
    TAccountStakeProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawStakeInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountValidatorList,
  TAccountWithdrawAuthority,
  TAccountStakeSplitFrom,
  TAccountStakeSplitTo,
  TAccountUserStakeAuthority,
  TAccountUserTransferAuthority,
  TAccountBurnFromPool,
  TAccountManagerFee,
  TAccountPoolMint,
  TAccountClock,
  TAccountTokenProgram,
  TAccountStakeProgram,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    stakeSplitFrom: { value: input.stakeSplitFrom ?? null, isWritable: true },
    stakeSplitTo: { value: input.stakeSplitTo ?? null, isWritable: true },
    userStakeAuthority: {
      value: input.userStakeAuthority ?? null,
      isWritable: false,
    },
    userTransferAuthority: {
      value: input.userTransferAuthority ?? null,
      isWritable: false,
    },
    burnFromPool: { value: input.burnFromPool ?? null, isWritable: true },
    managerFee: { value: input.managerFee ?? null, isWritable: true },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input, stakeProgram: input.stakeProgramArg };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.stakeSplitFrom),
      getAccountMeta(accounts.stakeSplitTo),
      getAccountMeta(accounts.userStakeAuthority),
      getAccountMeta(accounts.userTransferAuthority),
      getAccountMeta(accounts.burnFromPool),
      getAccountMeta(accounts.managerFee),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.stakeProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    programAddress,
    data: getWithdrawStakeInstructionDataEncoder().encode(
      args as WithdrawStakeInstructionDataArgs
    ),
  } as WithdrawStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountValidatorList,
    TAccountWithdrawAuthority,
    TAccountStakeSplitFrom,
    TAccountStakeSplitTo,
    TAccountUserStakeAuthority,
    TAccountUserTransferAuthority,
    TAccountBurnFromPool,
    TAccountManagerFee,
    TAccountPoolMint,
    TAccountClock,
    TAccountTokenProgram,
    TAccountStakeProgram,
    TAccountStakeProgram
  >;

  return instruction;
}

export type ParsedWithdrawStakeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    validatorList: TAccountMetas[1];
    withdrawAuthority: TAccountMetas[2];
    stakeSplitFrom: TAccountMetas[3];
    stakeSplitTo: TAccountMetas[4];
    userStakeAuthority: TAccountMetas[5];
    userTransferAuthority: TAccountMetas[6];
    burnFromPool: TAccountMetas[7];
    managerFee: TAccountMetas[8];
    poolMint: TAccountMetas[9];
    clock: TAccountMetas[10];
    tokenProgram: TAccountMetas[11];
    stakeProgram: TAccountMetas[12];
    stakeProgram: TAccountMetas[13];
  };
  data: WithdrawStakeInstructionData;
};

export function parseWithdrawStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWithdrawStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      validatorList: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      stakeSplitFrom: getNextAccount(),
      stakeSplitTo: getNextAccount(),
      userStakeAuthority: getNextAccount(),
      userTransferAuthority: getNextAccount(),
      burnFromPool: getNextAccount(),
      managerFee: getNextAccount(),
      poolMint: getNextAccount(),
      clock: getNextAccount(),
      tokenProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getWithdrawStakeInstructionDataDecoder().decode(instruction.data),
  };
}
