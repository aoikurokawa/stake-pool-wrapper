/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const WITHDRAW_STAKE_DISCRIMINATOR = new Uint8Array([
  153, 8, 22, 138, 105, 176, 87, 66,
]);

export function getWithdrawStakeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_STAKE_DISCRIMINATOR
  );
}

export type WithdrawStakeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountValidatorListStorage extends string | IAccountMeta<string> = string,
  TAccountStakePoolWithdraw extends string | IAccountMeta<string> = string,
  TAccountStakeToSplit extends string | IAccountMeta<string> = string,
  TAccountStakeToReceive extends string | IAccountMeta<string> = string,
  TAccountUserStakeAuthority extends string | IAccountMeta<string> = string,
  TAccountUserTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountUserPoolTokenAccount extends string | IAccountMeta<string> = string,
  TAccountManagerFeeAccount extends string | IAccountMeta<string> = string,
  TAccountPoolMint extends string | IAccountMeta<string> = string,
  TAccountClock extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountStakeProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountValidatorListStorage extends string
        ? WritableAccount<TAccountValidatorListStorage>
        : TAccountValidatorListStorage,
      TAccountStakePoolWithdraw extends string
        ? ReadonlyAccount<TAccountStakePoolWithdraw>
        : TAccountStakePoolWithdraw,
      TAccountStakeToSplit extends string
        ? WritableAccount<TAccountStakeToSplit>
        : TAccountStakeToSplit,
      TAccountStakeToReceive extends string
        ? WritableAccount<TAccountStakeToReceive>
        : TAccountStakeToReceive,
      TAccountUserStakeAuthority extends string
        ? ReadonlyAccount<TAccountUserStakeAuthority>
        : TAccountUserStakeAuthority,
      TAccountUserTransferAuthority extends string
        ? ReadonlySignerAccount<TAccountUserTransferAuthority> &
            IAccountSignerMeta<TAccountUserTransferAuthority>
        : TAccountUserTransferAuthority,
      TAccountUserPoolTokenAccount extends string
        ? WritableAccount<TAccountUserPoolTokenAccount>
        : TAccountUserPoolTokenAccount,
      TAccountManagerFeeAccount extends string
        ? WritableAccount<TAccountManagerFeeAccount>
        : TAccountManagerFeeAccount,
      TAccountPoolMint extends string
        ? WritableAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawStakeInstructionData = {
  discriminator: ReadonlyUint8Array;
  arg: bigint;
};

export type WithdrawStakeInstructionDataArgs = { arg: number | bigint };

export function getWithdrawStakeInstructionDataEncoder(): Encoder<WithdrawStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['arg', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WITHDRAW_STAKE_DISCRIMINATOR })
  );
}

export function getWithdrawStakeInstructionDataDecoder(): Decoder<WithdrawStakeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['arg', getU64Decoder()],
  ]);
}

export function getWithdrawStakeInstructionDataCodec(): Codec<
  WithdrawStakeInstructionDataArgs,
  WithdrawStakeInstructionData
> {
  return combineCodec(
    getWithdrawStakeInstructionDataEncoder(),
    getWithdrawStakeInstructionDataDecoder()
  );
}

export type WithdrawStakeInput<
  TAccountStakePool extends string = string,
  TAccountValidatorListStorage extends string = string,
  TAccountStakePoolWithdraw extends string = string,
  TAccountStakeToSplit extends string = string,
  TAccountStakeToReceive extends string = string,
  TAccountUserStakeAuthority extends string = string,
  TAccountUserTransferAuthority extends string = string,
  TAccountUserPoolTokenAccount extends string = string,
  TAccountManagerFeeAccount extends string = string,
  TAccountPoolMint extends string = string,
  TAccountClock extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountStakeProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  validatorListStorage: Address<TAccountValidatorListStorage>;
  stakePoolWithdraw: Address<TAccountStakePoolWithdraw>;
  stakeToSplit: Address<TAccountStakeToSplit>;
  stakeToReceive: Address<TAccountStakeToReceive>;
  userStakeAuthority: Address<TAccountUserStakeAuthority>;
  userTransferAuthority: TransactionSigner<TAccountUserTransferAuthority>;
  userPoolTokenAccount: Address<TAccountUserPoolTokenAccount>;
  managerFeeAccount: Address<TAccountManagerFeeAccount>;
  poolMint: Address<TAccountPoolMint>;
  clock: Address<TAccountClock>;
  tokenProgram?: Address<TAccountTokenProgram>;
  stakeProgram: Address<TAccountStakeProgram>;
  arg: WithdrawStakeInstructionDataArgs['arg'];
};

export function getWithdrawStakeInstruction<
  TAccountStakePool extends string,
  TAccountValidatorListStorage extends string,
  TAccountStakePoolWithdraw extends string,
  TAccountStakeToSplit extends string,
  TAccountStakeToReceive extends string,
  TAccountUserStakeAuthority extends string,
  TAccountUserTransferAuthority extends string,
  TAccountUserPoolTokenAccount extends string,
  TAccountManagerFeeAccount extends string,
  TAccountPoolMint extends string,
  TAccountClock extends string,
  TAccountTokenProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: WithdrawStakeInput<
    TAccountStakePool,
    TAccountValidatorListStorage,
    TAccountStakePoolWithdraw,
    TAccountStakeToSplit,
    TAccountStakeToReceive,
    TAccountUserStakeAuthority,
    TAccountUserTransferAuthority,
    TAccountUserPoolTokenAccount,
    TAccountManagerFeeAccount,
    TAccountPoolMint,
    TAccountClock,
    TAccountTokenProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawStakeInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountValidatorListStorage,
  TAccountStakePoolWithdraw,
  TAccountStakeToSplit,
  TAccountStakeToReceive,
  TAccountUserStakeAuthority,
  TAccountUserTransferAuthority,
  TAccountUserPoolTokenAccount,
  TAccountManagerFeeAccount,
  TAccountPoolMint,
  TAccountClock,
  TAccountTokenProgram,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    validatorListStorage: {
      value: input.validatorListStorage ?? null,
      isWritable: true,
    },
    stakePoolWithdraw: {
      value: input.stakePoolWithdraw ?? null,
      isWritable: false,
    },
    stakeToSplit: { value: input.stakeToSplit ?? null, isWritable: true },
    stakeToReceive: { value: input.stakeToReceive ?? null, isWritable: true },
    userStakeAuthority: {
      value: input.userStakeAuthority ?? null,
      isWritable: false,
    },
    userTransferAuthority: {
      value: input.userTransferAuthority ?? null,
      isWritable: false,
    },
    userPoolTokenAccount: {
      value: input.userPoolTokenAccount ?? null,
      isWritable: true,
    },
    managerFeeAccount: {
      value: input.managerFeeAccount ?? null,
      isWritable: true,
    },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.validatorListStorage),
      getAccountMeta(accounts.stakePoolWithdraw),
      getAccountMeta(accounts.stakeToSplit),
      getAccountMeta(accounts.stakeToReceive),
      getAccountMeta(accounts.userStakeAuthority),
      getAccountMeta(accounts.userTransferAuthority),
      getAccountMeta(accounts.userPoolTokenAccount),
      getAccountMeta(accounts.managerFeeAccount),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    programAddress,
    data: getWithdrawStakeInstructionDataEncoder().encode(
      args as WithdrawStakeInstructionDataArgs
    ),
  } as WithdrawStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountValidatorListStorage,
    TAccountStakePoolWithdraw,
    TAccountStakeToSplit,
    TAccountStakeToReceive,
    TAccountUserStakeAuthority,
    TAccountUserTransferAuthority,
    TAccountUserPoolTokenAccount,
    TAccountManagerFeeAccount,
    TAccountPoolMint,
    TAccountClock,
    TAccountTokenProgram,
    TAccountStakeProgram
  >;

  return instruction;
}

export type ParsedWithdrawStakeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    validatorListStorage: TAccountMetas[1];
    stakePoolWithdraw: TAccountMetas[2];
    stakeToSplit: TAccountMetas[3];
    stakeToReceive: TAccountMetas[4];
    userStakeAuthority: TAccountMetas[5];
    userTransferAuthority: TAccountMetas[6];
    userPoolTokenAccount: TAccountMetas[7];
    managerFeeAccount: TAccountMetas[8];
    poolMint: TAccountMetas[9];
    clock: TAccountMetas[10];
    tokenProgram: TAccountMetas[11];
    stakeProgram: TAccountMetas[12];
  };
  data: WithdrawStakeInstructionData;
};

export function parseWithdrawStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWithdrawStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      validatorListStorage: getNextAccount(),
      stakePoolWithdraw: getNextAccount(),
      stakeToSplit: getNextAccount(),
      stakeToReceive: getNextAccount(),
      userStakeAuthority: getNextAccount(),
      userTransferAuthority: getNextAccount(),
      userPoolTokenAccount: getNextAccount(),
      managerFeeAccount: getNextAccount(),
      poolMint: getNextAccount(),
      clock: getNextAccount(),
      tokenProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getWithdrawStakeInstructionDataDecoder().decode(instruction.data),
  };
}
