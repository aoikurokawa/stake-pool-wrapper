/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DEPOSIT_STAKE_WITH_SLIPPAGE_DISCRIMINATOR = 23;

export function getDepositStakeWithSlippageDiscriminatorBytes() {
  return getU8Encoder().encode(DEPOSIT_STAKE_WITH_SLIPPAGE_DISCRIMINATOR);
}

export type DepositStakeWithSlippageInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountValidatorList extends string | IAccountMeta<string> = string,
  TAccountStakeDepositAuthority extends string | IAccountMeta<string> = string,
  TAccountWithdrawAuthority extends string | IAccountMeta<string> = string,
  TAccountStake extends string | IAccountMeta<string> = string,
  TAccountValidatorStakeAccount extends string | IAccountMeta<string> = string,
  TAccountReserveStakeAccount extends string | IAccountMeta<string> = string,
  TAccountDestUserPool extends string | IAccountMeta<string> = string,
  TAccountManagerFee extends string | IAccountMeta<string> = string,
  TAccountReferrerFee extends string | IAccountMeta<string> = string,
  TAccountPoolMint extends string | IAccountMeta<string> = string,
  TAccountClock extends string | IAccountMeta<string> = string,
  TAccountStakeHistory extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends string | IAccountMeta<string> = string,
  TAccountStakeProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountStakeDepositAuthority extends string
        ? ReadonlySignerAccount<TAccountStakeDepositAuthority> &
            IAccountSignerMeta<TAccountStakeDepositAuthority>
        : TAccountStakeDepositAuthority,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountStake extends string
        ? WritableAccount<TAccountStake>
        : TAccountStake,
      TAccountValidatorStakeAccount extends string
        ? WritableAccount<TAccountValidatorStakeAccount>
        : TAccountValidatorStakeAccount,
      TAccountReserveStakeAccount extends string
        ? WritableAccount<TAccountReserveStakeAccount>
        : TAccountReserveStakeAccount,
      TAccountDestUserPool extends string
        ? WritableAccount<TAccountDestUserPool>
        : TAccountDestUserPool,
      TAccountManagerFee extends string
        ? WritableAccount<TAccountManagerFee>
        : TAccountManagerFee,
      TAccountReferrerFee extends string
        ? WritableAccount<TAccountReferrerFee>
        : TAccountReferrerFee,
      TAccountPoolMint extends string
        ? WritableAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountStakeHistory extends string
        ? ReadonlyAccount<TAccountStakeHistory>
        : TAccountStakeHistory,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DepositStakeWithSlippageInstructionData = {
  discriminator: number;
  minimumPoolTokensOut: bigint;
};

export type DepositStakeWithSlippageInstructionDataArgs = {
  minimumPoolTokensOut: number | bigint;
};

export function getDepositStakeWithSlippageInstructionDataEncoder(): Encoder<DepositStakeWithSlippageInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['minimumPoolTokensOut', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DEPOSIT_STAKE_WITH_SLIPPAGE_DISCRIMINATOR,
    })
  );
}

export function getDepositStakeWithSlippageInstructionDataDecoder(): Decoder<DepositStakeWithSlippageInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['minimumPoolTokensOut', getU64Decoder()],
  ]);
}

export function getDepositStakeWithSlippageInstructionDataCodec(): Codec<
  DepositStakeWithSlippageInstructionDataArgs,
  DepositStakeWithSlippageInstructionData
> {
  return combineCodec(
    getDepositStakeWithSlippageInstructionDataEncoder(),
    getDepositStakeWithSlippageInstructionDataDecoder()
  );
}

export type DepositStakeWithSlippageInput<
  TAccountStakePool extends string = string,
  TAccountValidatorList extends string = string,
  TAccountStakeDepositAuthority extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountStake extends string = string,
  TAccountValidatorStakeAccount extends string = string,
  TAccountReserveStakeAccount extends string = string,
  TAccountDestUserPool extends string = string,
  TAccountManagerFee extends string = string,
  TAccountReferrerFee extends string = string,
  TAccountPoolMint extends string = string,
  TAccountClock extends string = string,
  TAccountStakeHistory extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountStakeProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  validatorList: Address<TAccountValidatorList>;
  stakeDepositAuthority: TransactionSigner<TAccountStakeDepositAuthority>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  stake: Address<TAccountStake>;
  validatorStakeAccount: Address<TAccountValidatorStakeAccount>;
  reserveStakeAccount: Address<TAccountReserveStakeAccount>;
  destUserPool: Address<TAccountDestUserPool>;
  managerFee: Address<TAccountManagerFee>;
  referrerFee: Address<TAccountReferrerFee>;
  poolMint: Address<TAccountPoolMint>;
  clock: Address<TAccountClock>;
  stakeHistory: Address<TAccountStakeHistory>;
  tokenProgram: Address<TAccountTokenProgram>;
  stakeProgram: Address<TAccountStakeProgram>;
  minimumPoolTokensOut: DepositStakeWithSlippageInstructionDataArgs['minimumPoolTokensOut'];
};

export function getDepositStakeWithSlippageInstruction<
  TAccountStakePool extends string,
  TAccountValidatorList extends string,
  TAccountStakeDepositAuthority extends string,
  TAccountWithdrawAuthority extends string,
  TAccountStake extends string,
  TAccountValidatorStakeAccount extends string,
  TAccountReserveStakeAccount extends string,
  TAccountDestUserPool extends string,
  TAccountManagerFee extends string,
  TAccountReferrerFee extends string,
  TAccountPoolMint extends string,
  TAccountClock extends string,
  TAccountStakeHistory extends string,
  TAccountTokenProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: DepositStakeWithSlippageInput<
    TAccountStakePool,
    TAccountValidatorList,
    TAccountStakeDepositAuthority,
    TAccountWithdrawAuthority,
    TAccountStake,
    TAccountValidatorStakeAccount,
    TAccountReserveStakeAccount,
    TAccountDestUserPool,
    TAccountManagerFee,
    TAccountReferrerFee,
    TAccountPoolMint,
    TAccountClock,
    TAccountStakeHistory,
    TAccountTokenProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DepositStakeWithSlippageInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountValidatorList,
  TAccountStakeDepositAuthority,
  TAccountWithdrawAuthority,
  TAccountStake,
  TAccountValidatorStakeAccount,
  TAccountReserveStakeAccount,
  TAccountDestUserPool,
  TAccountManagerFee,
  TAccountReferrerFee,
  TAccountPoolMint,
  TAccountClock,
  TAccountStakeHistory,
  TAccountTokenProgram,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    stakeDepositAuthority: {
      value: input.stakeDepositAuthority ?? null,
      isWritable: false,
    },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    stake: { value: input.stake ?? null, isWritable: true },
    validatorStakeAccount: {
      value: input.validatorStakeAccount ?? null,
      isWritable: true,
    },
    reserveStakeAccount: {
      value: input.reserveStakeAccount ?? null,
      isWritable: true,
    },
    destUserPool: { value: input.destUserPool ?? null, isWritable: true },
    managerFee: { value: input.managerFee ?? null, isWritable: true },
    referrerFee: { value: input.referrerFee ?? null, isWritable: true },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.stakeDepositAuthority),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.stake),
      getAccountMeta(accounts.validatorStakeAccount),
      getAccountMeta(accounts.reserveStakeAccount),
      getAccountMeta(accounts.destUserPool),
      getAccountMeta(accounts.managerFee),
      getAccountMeta(accounts.referrerFee),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.stakeHistory),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    programAddress,
    data: getDepositStakeWithSlippageInstructionDataEncoder().encode(
      args as DepositStakeWithSlippageInstructionDataArgs
    ),
  } as DepositStakeWithSlippageInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountValidatorList,
    TAccountStakeDepositAuthority,
    TAccountWithdrawAuthority,
    TAccountStake,
    TAccountValidatorStakeAccount,
    TAccountReserveStakeAccount,
    TAccountDestUserPool,
    TAccountManagerFee,
    TAccountReferrerFee,
    TAccountPoolMint,
    TAccountClock,
    TAccountStakeHistory,
    TAccountTokenProgram,
    TAccountStakeProgram
  >;

  return instruction;
}

export type ParsedDepositStakeWithSlippageInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    validatorList: TAccountMetas[1];
    stakeDepositAuthority: TAccountMetas[2];
    withdrawAuthority: TAccountMetas[3];
    stake: TAccountMetas[4];
    validatorStakeAccount: TAccountMetas[5];
    reserveStakeAccount: TAccountMetas[6];
    destUserPool: TAccountMetas[7];
    managerFee: TAccountMetas[8];
    referrerFee: TAccountMetas[9];
    poolMint: TAccountMetas[10];
    clock: TAccountMetas[11];
    stakeHistory: TAccountMetas[12];
    tokenProgram: TAccountMetas[13];
    stakeProgram: TAccountMetas[14];
  };
  data: DepositStakeWithSlippageInstructionData;
};

export function parseDepositStakeWithSlippageInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDepositStakeWithSlippageInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      validatorList: getNextAccount(),
      stakeDepositAuthority: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      stake: getNextAccount(),
      validatorStakeAccount: getNextAccount(),
      reserveStakeAccount: getNextAccount(),
      destUserPool: getNextAccount(),
      managerFee: getNextAccount(),
      referrerFee: getNextAccount(),
      poolMint: getNextAccount(),
      clock: getNextAccount(),
      stakeHistory: getNextAccount(),
      tokenProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getDepositStakeWithSlippageInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
