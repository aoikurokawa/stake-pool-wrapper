/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REMOVE_VALIDATOR_FROM_POOL_DISCRIMINATOR = new Uint8Array([
  161, 32, 213, 239, 221, 15, 181, 114,
]);

export function getRemoveValidatorFromPoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REMOVE_VALIDATOR_FROM_POOL_DISCRIMINATOR
  );
}

export type RemoveValidatorFromPoolInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountStaker extends string | IAccountMeta<string> = string,
  TAccountStakePoolWithdraw extends string | IAccountMeta<string> = string,
  TAccountNewStakeAuthority extends string | IAccountMeta<string> = string,
  TAccountValidatorList extends string | IAccountMeta<string> = string,
  TAccountStakeAccount extends string | IAccountMeta<string> = string,
  TAccountTransientStakeAccount extends string | IAccountMeta<string> = string,
  TAccountDestinationStakeAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountClock extends string | IAccountMeta<string> = string,
  TAccountStakeProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStaker extends string
        ? ReadonlySignerAccount<TAccountStaker> &
            IAccountSignerMeta<TAccountStaker>
        : TAccountStaker,
      TAccountStakePoolWithdraw extends string
        ? ReadonlyAccount<TAccountStakePoolWithdraw>
        : TAccountStakePoolWithdraw,
      TAccountNewStakeAuthority extends string
        ? ReadonlyAccount<TAccountNewStakeAuthority>
        : TAccountNewStakeAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountTransientStakeAccount extends string
        ? ReadonlyAccount<TAccountTransientStakeAccount>
        : TAccountTransientStakeAccount,
      TAccountDestinationStakeAccount extends string
        ? WritableAccount<TAccountDestinationStakeAccount>
        : TAccountDestinationStakeAccount,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RemoveValidatorFromPoolInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type RemoveValidatorFromPoolInstructionDataArgs = {};

export function getRemoveValidatorFromPoolInstructionDataEncoder(): Encoder<RemoveValidatorFromPoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: REMOVE_VALIDATOR_FROM_POOL_DISCRIMINATOR,
    })
  );
}

export function getRemoveValidatorFromPoolInstructionDataDecoder(): Decoder<RemoveValidatorFromPoolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getRemoveValidatorFromPoolInstructionDataCodec(): Codec<
  RemoveValidatorFromPoolInstructionDataArgs,
  RemoveValidatorFromPoolInstructionData
> {
  return combineCodec(
    getRemoveValidatorFromPoolInstructionDataEncoder(),
    getRemoveValidatorFromPoolInstructionDataDecoder()
  );
}

export type RemoveValidatorFromPoolInput<
  TAccountStakePool extends string = string,
  TAccountStaker extends string = string,
  TAccountStakePoolWithdraw extends string = string,
  TAccountNewStakeAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountTransientStakeAccount extends string = string,
  TAccountDestinationStakeAccount extends string = string,
  TAccountClock extends string = string,
  TAccountStakeProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  staker: TransactionSigner<TAccountStaker>;
  stakePoolWithdraw: Address<TAccountStakePoolWithdraw>;
  newStakeAuthority: Address<TAccountNewStakeAuthority>;
  validatorList: Address<TAccountValidatorList>;
  stakeAccount: Address<TAccountStakeAccount>;
  transientStakeAccount: Address<TAccountTransientStakeAccount>;
  destinationStakeAccount: Address<TAccountDestinationStakeAccount>;
  clock: Address<TAccountClock>;
  stakeProgram: Address<TAccountStakeProgram>;
};

export function getRemoveValidatorFromPoolInstruction<
  TAccountStakePool extends string,
  TAccountStaker extends string,
  TAccountStakePoolWithdraw extends string,
  TAccountNewStakeAuthority extends string,
  TAccountValidatorList extends string,
  TAccountStakeAccount extends string,
  TAccountTransientStakeAccount extends string,
  TAccountDestinationStakeAccount extends string,
  TAccountClock extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: RemoveValidatorFromPoolInput<
    TAccountStakePool,
    TAccountStaker,
    TAccountStakePoolWithdraw,
    TAccountNewStakeAuthority,
    TAccountValidatorList,
    TAccountStakeAccount,
    TAccountTransientStakeAccount,
    TAccountDestinationStakeAccount,
    TAccountClock,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RemoveValidatorFromPoolInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountStaker,
  TAccountStakePoolWithdraw,
  TAccountNewStakeAuthority,
  TAccountValidatorList,
  TAccountStakeAccount,
  TAccountTransientStakeAccount,
  TAccountDestinationStakeAccount,
  TAccountClock,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    staker: { value: input.staker ?? null, isWritable: false },
    stakePoolWithdraw: {
      value: input.stakePoolWithdraw ?? null,
      isWritable: false,
    },
    newStakeAuthority: {
      value: input.newStakeAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    transientStakeAccount: {
      value: input.transientStakeAccount ?? null,
      isWritable: false,
    },
    destinationStakeAccount: {
      value: input.destinationStakeAccount ?? null,
      isWritable: true,
    },
    clock: { value: input.clock ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.stakePoolWithdraw),
      getAccountMeta(accounts.newStakeAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.transientStakeAccount),
      getAccountMeta(accounts.destinationStakeAccount),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.stakeProgram),
    ],
    programAddress,
    data: getRemoveValidatorFromPoolInstructionDataEncoder().encode({}),
  } as RemoveValidatorFromPoolInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountStakePoolWithdraw,
    TAccountNewStakeAuthority,
    TAccountValidatorList,
    TAccountStakeAccount,
    TAccountTransientStakeAccount,
    TAccountDestinationStakeAccount,
    TAccountClock,
    TAccountStakeProgram
  >;

  return instruction;
}

export type ParsedRemoveValidatorFromPoolInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    staker: TAccountMetas[1];
    stakePoolWithdraw: TAccountMetas[2];
    newStakeAuthority: TAccountMetas[3];
    validatorList: TAccountMetas[4];
    stakeAccount: TAccountMetas[5];
    transientStakeAccount: TAccountMetas[6];
    destinationStakeAccount: TAccountMetas[7];
    clock: TAccountMetas[8];
    stakeProgram: TAccountMetas[9];
  };
  data: RemoveValidatorFromPoolInstructionData;
};

export function parseRemoveValidatorFromPoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRemoveValidatorFromPoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      staker: getNextAccount(),
      stakePoolWithdraw: getNextAccount(),
      newStakeAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      stakeAccount: getNextAccount(),
      transientStakeAccount: getNextAccount(),
      destinationStakeAccount: getNextAccount(),
      clock: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getRemoveValidatorFromPoolInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
