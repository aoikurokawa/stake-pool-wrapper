/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
} from '@solana/kit';
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';

export const REDELEGATE_DISCRIMINATOR = 22;

export function getRedelegateDiscriminatorBytes() {
  return getU8Encoder().encode(REDELEGATE_DISCRIMINATOR);
}

export type RedelegateInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<TRemainingAccounts>;

export type RedelegateInstructionData = {
  discriminator: number;
  lamports: bigint;
  sourceTransientStakeSeed: bigint;
  ephemeralStakeSeed: bigint;
  destinationTransientStakeSeed: bigint;
};

export type RedelegateInstructionDataArgs = {
  lamports: number | bigint;
  sourceTransientStakeSeed: number | bigint;
  ephemeralStakeSeed: number | bigint;
  destinationTransientStakeSeed: number | bigint;
};

export function getRedelegateInstructionDataEncoder(): Encoder<RedelegateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['lamports', getU64Encoder()],
      ['sourceTransientStakeSeed', getU64Encoder()],
      ['ephemeralStakeSeed', getU64Encoder()],
      ['destinationTransientStakeSeed', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REDELEGATE_DISCRIMINATOR })
  );
}

export function getRedelegateInstructionDataDecoder(): Decoder<RedelegateInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['lamports', getU64Decoder()],
    ['sourceTransientStakeSeed', getU64Decoder()],
    ['ephemeralStakeSeed', getU64Decoder()],
    ['destinationTransientStakeSeed', getU64Decoder()],
  ]);
}

export function getRedelegateInstructionDataCodec(): Codec<
  RedelegateInstructionDataArgs,
  RedelegateInstructionData
> {
  return combineCodec(
    getRedelegateInstructionDataEncoder(),
    getRedelegateInstructionDataDecoder()
  );
}

export type RedelegateInput = {
  lamports: RedelegateInstructionDataArgs['lamports'];
  sourceTransientStakeSeed: RedelegateInstructionDataArgs['sourceTransientStakeSeed'];
  ephemeralStakeSeed: RedelegateInstructionDataArgs['ephemeralStakeSeed'];
  destinationTransientStakeSeed: RedelegateInstructionDataArgs['destinationTransientStakeSeed'];
};

export function getRedelegateInstruction<
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: RedelegateInput,
  config?: { programAddress?: TProgramAddress }
): RedelegateInstruction<TProgramAddress> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original args.
  const args = { ...input };

  const instruction = {
    programAddress,
    data: getRedelegateInstructionDataEncoder().encode(
      args as RedelegateInstructionDataArgs
    ),
  } as RedelegateInstruction<TProgramAddress>;

  return instruction;
}

export type ParsedRedelegateInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: RedelegateInstructionData;
};

export function parseRedelegateInstruction<TProgram extends string>(
  instruction: IInstruction<TProgram> & IInstructionWithData<Uint8Array>
): ParsedRedelegateInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getRedelegateInstructionDataDecoder().decode(instruction.data),
  };
}
