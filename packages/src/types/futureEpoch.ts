/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getUnitDecoder,
  getUnitEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/kit';
import { getTDecoder, getTEncoder, type T, type TArgs } from '.';

export type FutureEpoch =
  | { __kind: 'None' }
  | { __kind: 'One'; fields: readonly [T] }
  | { __kind: 'Two'; fields: readonly [T] };

export type FutureEpochArgs =
  | { __kind: 'None' }
  | { __kind: 'One'; fields: readonly [TArgs] }
  | { __kind: 'Two'; fields: readonly [TArgs] };

export function getFutureEpochEncoder(): Encoder<FutureEpochArgs> {
  return getDiscriminatedUnionEncoder([
    ['None', getUnitEncoder()],
    ['One', getStructEncoder([['fields', getTupleEncoder([getTEncoder()])]])],
    ['Two', getStructEncoder([['fields', getTupleEncoder([getTEncoder()])]])],
  ]);
}

export function getFutureEpochDecoder(): Decoder<FutureEpoch> {
  return getDiscriminatedUnionDecoder([
    ['None', getUnitDecoder()],
    ['One', getStructDecoder([['fields', getTupleDecoder([getTDecoder()])]])],
    ['Two', getStructDecoder([['fields', getTupleDecoder([getTDecoder()])]])],
  ]);
}

export function getFutureEpochCodec(): Codec<FutureEpochArgs, FutureEpoch> {
  return combineCodec(getFutureEpochEncoder(), getFutureEpochDecoder());
}

// Data Enum Helpers.
export function futureEpoch(
  kind: 'None'
): GetDiscriminatedUnionVariant<FutureEpochArgs, '__kind', 'None'>;
export function futureEpoch(
  kind: 'One',
  data: GetDiscriminatedUnionVariantContent<
    FutureEpochArgs,
    '__kind',
    'One'
  >['fields']
): GetDiscriminatedUnionVariant<FutureEpochArgs, '__kind', 'One'>;
export function futureEpoch(
  kind: 'Two',
  data: GetDiscriminatedUnionVariantContent<
    FutureEpochArgs,
    '__kind',
    'Two'
  >['fields']
): GetDiscriminatedUnionVariant<FutureEpochArgs, '__kind', 'Two'>;
export function futureEpoch<K extends FutureEpochArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isFutureEpoch<K extends FutureEpoch['__kind']>(
  kind: K,
  value: FutureEpoch
): value is FutureEpoch & { __kind: K } {
  return value.__kind === kind;
}
