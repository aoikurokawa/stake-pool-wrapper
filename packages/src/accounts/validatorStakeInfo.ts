/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getStakeStatusDecoder,
  getStakeStatusEncoder,
  type StakeStatus,
  type StakeStatusArgs,
} from '../types';

export const VALIDATOR_STAKE_INFO_DISCRIMINATOR = new Uint8Array([
  199, 238, 148, 182, 193, 141, 114, 26,
]);

export function getValidatorStakeInfoDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VALIDATOR_STAKE_INFO_DISCRIMINATOR
  );
}

export type ValidatorStakeInfo = {
  discriminator: ReadonlyUint8Array;
  activeStakeLamports: bigint;
  transientStakeLamports: bigint;
  lastUpdateEpoch: bigint;
  transientSeedSuffixStart: bigint;
  transientSeedSuffixEnd: bigint;
  status: StakeStatus;
  voteAccountAddress: Address;
};

export type ValidatorStakeInfoArgs = {
  activeStakeLamports: number | bigint;
  transientStakeLamports: number | bigint;
  lastUpdateEpoch: number | bigint;
  transientSeedSuffixStart: number | bigint;
  transientSeedSuffixEnd: number | bigint;
  status: StakeStatusArgs;
  voteAccountAddress: Address;
};

export function getValidatorStakeInfoEncoder(): Encoder<ValidatorStakeInfoArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['activeStakeLamports', getU64Encoder()],
      ['transientStakeLamports', getU64Encoder()],
      ['lastUpdateEpoch', getU64Encoder()],
      ['transientSeedSuffixStart', getU64Encoder()],
      ['transientSeedSuffixEnd', getU64Encoder()],
      ['status', getStakeStatusEncoder()],
      ['voteAccountAddress', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: VALIDATOR_STAKE_INFO_DISCRIMINATOR })
  );
}

export function getValidatorStakeInfoDecoder(): Decoder<ValidatorStakeInfo> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['activeStakeLamports', getU64Decoder()],
    ['transientStakeLamports', getU64Decoder()],
    ['lastUpdateEpoch', getU64Decoder()],
    ['transientSeedSuffixStart', getU64Decoder()],
    ['transientSeedSuffixEnd', getU64Decoder()],
    ['status', getStakeStatusDecoder()],
    ['voteAccountAddress', getAddressDecoder()],
  ]);
}

export function getValidatorStakeInfoCodec(): Codec<
  ValidatorStakeInfoArgs,
  ValidatorStakeInfo
> {
  return combineCodec(
    getValidatorStakeInfoEncoder(),
    getValidatorStakeInfoDecoder()
  );
}

export function decodeValidatorStakeInfo<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ValidatorStakeInfo, TAddress>;
export function decodeValidatorStakeInfo<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ValidatorStakeInfo, TAddress>;
export function decodeValidatorStakeInfo<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ValidatorStakeInfo, TAddress>
  | MaybeAccount<ValidatorStakeInfo, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getValidatorStakeInfoDecoder()
  );
}

export async function fetchValidatorStakeInfo<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ValidatorStakeInfo, TAddress>> {
  const maybeAccount = await fetchMaybeValidatorStakeInfo(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeValidatorStakeInfo<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ValidatorStakeInfo, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeValidatorStakeInfo(maybeAccount);
}

export async function fetchAllValidatorStakeInfo(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ValidatorStakeInfo>[]> {
  const maybeAccounts = await fetchAllMaybeValidatorStakeInfo(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeValidatorStakeInfo(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ValidatorStakeInfo>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeValidatorStakeInfo(maybeAccount)
  );
}

export function getValidatorStakeInfoSize(): number {
  return 81;
}
