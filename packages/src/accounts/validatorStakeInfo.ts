/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';
import {
  getPodStakeStatusDecoder,
  getPodStakeStatusEncoder,
  getPodU32Decoder,
  getPodU32Encoder,
  getPodU64Decoder,
  getPodU64Encoder,
  type PodStakeStatus,
  type PodStakeStatusArgs,
  type PodU32,
  type PodU32Args,
  type PodU64,
  type PodU64Args,
} from '../types';

export type ValidatorStakeInfo = {
  activeStakeLamports: PodU64;
  transientStakeLamports: PodU64;
  lastUpdateEpoch: PodU64;
  transientSeedSuffix: PodU64;
  unused: PodU32;
  validatorSeedSuffix: PodU32;
  status: PodStakeStatus;
  voteAccountAddress: Address;
};

export type ValidatorStakeInfoArgs = {
  activeStakeLamports: PodU64Args;
  transientStakeLamports: PodU64Args;
  lastUpdateEpoch: PodU64Args;
  transientSeedSuffix: PodU64Args;
  unused: PodU32Args;
  validatorSeedSuffix: PodU32Args;
  status: PodStakeStatusArgs;
  voteAccountAddress: Address;
};

export function getValidatorStakeInfoEncoder(): Encoder<ValidatorStakeInfoArgs> {
  return getStructEncoder([
    ['activeStakeLamports', getPodU64Encoder()],
    ['transientStakeLamports', getPodU64Encoder()],
    ['lastUpdateEpoch', getPodU64Encoder()],
    ['transientSeedSuffix', getPodU64Encoder()],
    ['unused', getPodU32Encoder()],
    ['validatorSeedSuffix', getPodU32Encoder()],
    ['status', getPodStakeStatusEncoder()],
    ['voteAccountAddress', getAddressEncoder()],
  ]);
}

export function getValidatorStakeInfoDecoder(): Decoder<ValidatorStakeInfo> {
  return getStructDecoder([
    ['activeStakeLamports', getPodU64Decoder()],
    ['transientStakeLamports', getPodU64Decoder()],
    ['lastUpdateEpoch', getPodU64Decoder()],
    ['transientSeedSuffix', getPodU64Decoder()],
    ['unused', getPodU32Decoder()],
    ['validatorSeedSuffix', getPodU32Decoder()],
    ['status', getPodStakeStatusDecoder()],
    ['voteAccountAddress', getAddressDecoder()],
  ]);
}

export function getValidatorStakeInfoCodec(): Codec<
  ValidatorStakeInfoArgs,
  ValidatorStakeInfo
> {
  return combineCodec(
    getValidatorStakeInfoEncoder(),
    getValidatorStakeInfoDecoder()
  );
}

export function decodeValidatorStakeInfo<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ValidatorStakeInfo, TAddress>;
export function decodeValidatorStakeInfo<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ValidatorStakeInfo, TAddress>;
export function decodeValidatorStakeInfo<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ValidatorStakeInfo, TAddress>
  | MaybeAccount<ValidatorStakeInfo, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getValidatorStakeInfoDecoder()
  );
}

export async function fetchValidatorStakeInfo<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ValidatorStakeInfo, TAddress>> {
  const maybeAccount = await fetchMaybeValidatorStakeInfo(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeValidatorStakeInfo<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ValidatorStakeInfo, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeValidatorStakeInfo(maybeAccount);
}

export async function fetchAllValidatorStakeInfo(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ValidatorStakeInfo>[]> {
  const maybeAccounts = await fetchAllMaybeValidatorStakeInfo(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeValidatorStakeInfo(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ValidatorStakeInfo>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeValidatorStakeInfo(maybeAccount)
  );
}
