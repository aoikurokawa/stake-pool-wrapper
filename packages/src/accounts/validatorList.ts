/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getStructDecoder,
  getStructEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';
import {
  getValidatorListHeaderDecoder,
  getValidatorListHeaderEncoder,
  getVecDecoder,
  getVecEncoder,
  type ValidatorListHeader,
  type ValidatorListHeaderArgs,
  type Vec,
  type VecArgs,
} from '../types';

export type ValidatorList = { header: ValidatorListHeader; validators: Vec };

export type ValidatorListArgs = {
  header: ValidatorListHeaderArgs;
  validators: VecArgs;
};

export function getValidatorListEncoder(): Encoder<ValidatorListArgs> {
  return getStructEncoder([
    ['header', getValidatorListHeaderEncoder()],
    ['validators', getVecEncoder()],
  ]);
}

export function getValidatorListDecoder(): Decoder<ValidatorList> {
  return getStructDecoder([
    ['header', getValidatorListHeaderDecoder()],
    ['validators', getVecDecoder()],
  ]);
}

export function getValidatorListCodec(): Codec<
  ValidatorListArgs,
  ValidatorList
> {
  return combineCodec(getValidatorListEncoder(), getValidatorListDecoder());
}

export function decodeValidatorList<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ValidatorList, TAddress>;
export function decodeValidatorList<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ValidatorList, TAddress>;
export function decodeValidatorList<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ValidatorList, TAddress> | MaybeAccount<ValidatorList, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getValidatorListDecoder()
  );
}

export async function fetchValidatorList<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ValidatorList, TAddress>> {
  const maybeAccount = await fetchMaybeValidatorList(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeValidatorList<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ValidatorList, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeValidatorList(maybeAccount);
}

export async function fetchAllValidatorList(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ValidatorList>[]> {
  const maybeAccounts = await fetchAllMaybeValidatorList(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeValidatorList(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ValidatorList>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeValidatorList(maybeAccount));
}
