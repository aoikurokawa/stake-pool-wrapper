/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getAccountTypeDecoder,
  getAccountTypeEncoder,
  getFeeDecoder,
  getFeeEncoder,
  getLockupDecoder,
  getLockupEncoder,
  type AccountType,
  type AccountTypeArgs,
  type Fee,
  type FeeArgs,
  type Lockup,
  type LockupArgs,
} from '../types';

export const STAKE_POOL_DISCRIMINATOR = new Uint8Array([
  121, 34, 206, 21, 79, 127, 255, 28,
]);

export function getStakePoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(STAKE_POOL_DISCRIMINATOR);
}

export type StakePool = {
  discriminator: ReadonlyUint8Array;
  accountType: AccountType;
  manager: Address;
  staker: Address;
  stakeDepositAuthority: Address;
  stakeWithdrawBumpSeed: number;
  validatorList: Address;
  reserveStake: Address;
  poolMint: Address;
  managerFeeAccount: Address;
  tokenProgramId: Address;
  totalLamports: bigint;
  poolTokenSupply: bigint;
  lastUpdateEpoch: bigint;
  lockup: Lockup;
  epochFee: Fee;
  nextEpochFee: Option<Fee>;
  preferredDepositValidatorVoteAddress: Option<Address>;
  preferredWithdrawValidatorVoteAddress: Option<Address>;
  stakeDepositFee: Fee;
  stakeWithdrawalFee: Fee;
  nextStakeWithdrawalFee: Option<Fee>;
  stakeReferralFee: number;
  solDepositAuthority: Option<Address>;
  solDepositFee: Fee;
  solReferralFee: number;
  solWithdrawAuthority: Option<Address>;
  solWithdrawalFee: Fee;
  nextSolWithdrawalFee: Option<Fee>;
  lastEpochPoolTokenSupply: bigint;
  lastEpochTotalLamports: bigint;
};

export type StakePoolArgs = {
  accountType: AccountTypeArgs;
  manager: Address;
  staker: Address;
  stakeDepositAuthority: Address;
  stakeWithdrawBumpSeed: number;
  validatorList: Address;
  reserveStake: Address;
  poolMint: Address;
  managerFeeAccount: Address;
  tokenProgramId: Address;
  totalLamports: number | bigint;
  poolTokenSupply: number | bigint;
  lastUpdateEpoch: number | bigint;
  lockup: LockupArgs;
  epochFee: FeeArgs;
  nextEpochFee: OptionOrNullable<FeeArgs>;
  preferredDepositValidatorVoteAddress: OptionOrNullable<Address>;
  preferredWithdrawValidatorVoteAddress: OptionOrNullable<Address>;
  stakeDepositFee: FeeArgs;
  stakeWithdrawalFee: FeeArgs;
  nextStakeWithdrawalFee: OptionOrNullable<FeeArgs>;
  stakeReferralFee: number;
  solDepositAuthority: OptionOrNullable<Address>;
  solDepositFee: FeeArgs;
  solReferralFee: number;
  solWithdrawAuthority: OptionOrNullable<Address>;
  solWithdrawalFee: FeeArgs;
  nextSolWithdrawalFee: OptionOrNullable<FeeArgs>;
  lastEpochPoolTokenSupply: number | bigint;
  lastEpochTotalLamports: number | bigint;
};

export function getStakePoolEncoder(): Encoder<StakePoolArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['accountType', getAccountTypeEncoder()],
      ['manager', getAddressEncoder()],
      ['staker', getAddressEncoder()],
      ['stakeDepositAuthority', getAddressEncoder()],
      ['stakeWithdrawBumpSeed', getU8Encoder()],
      ['validatorList', getAddressEncoder()],
      ['reserveStake', getAddressEncoder()],
      ['poolMint', getAddressEncoder()],
      ['managerFeeAccount', getAddressEncoder()],
      ['tokenProgramId', getAddressEncoder()],
      ['totalLamports', getU64Encoder()],
      ['poolTokenSupply', getU64Encoder()],
      ['lastUpdateEpoch', getU64Encoder()],
      ['lockup', getLockupEncoder()],
      ['epochFee', getFeeEncoder()],
      ['nextEpochFee', getOptionEncoder(getFeeEncoder())],
      [
        'preferredDepositValidatorVoteAddress',
        getOptionEncoder(getAddressEncoder()),
      ],
      [
        'preferredWithdrawValidatorVoteAddress',
        getOptionEncoder(getAddressEncoder()),
      ],
      ['stakeDepositFee', getFeeEncoder()],
      ['stakeWithdrawalFee', getFeeEncoder()],
      ['nextStakeWithdrawalFee', getOptionEncoder(getFeeEncoder())],
      ['stakeReferralFee', getU8Encoder()],
      ['solDepositAuthority', getOptionEncoder(getAddressEncoder())],
      ['solDepositFee', getFeeEncoder()],
      ['solReferralFee', getU8Encoder()],
      ['solWithdrawAuthority', getOptionEncoder(getAddressEncoder())],
      ['solWithdrawalFee', getFeeEncoder()],
      ['nextSolWithdrawalFee', getOptionEncoder(getFeeEncoder())],
      ['lastEpochPoolTokenSupply', getU64Encoder()],
      ['lastEpochTotalLamports', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: STAKE_POOL_DISCRIMINATOR })
  );
}

export function getStakePoolDecoder(): Decoder<StakePool> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['accountType', getAccountTypeDecoder()],
    ['manager', getAddressDecoder()],
    ['staker', getAddressDecoder()],
    ['stakeDepositAuthority', getAddressDecoder()],
    ['stakeWithdrawBumpSeed', getU8Decoder()],
    ['validatorList', getAddressDecoder()],
    ['reserveStake', getAddressDecoder()],
    ['poolMint', getAddressDecoder()],
    ['managerFeeAccount', getAddressDecoder()],
    ['tokenProgramId', getAddressDecoder()],
    ['totalLamports', getU64Decoder()],
    ['poolTokenSupply', getU64Decoder()],
    ['lastUpdateEpoch', getU64Decoder()],
    ['lockup', getLockupDecoder()],
    ['epochFee', getFeeDecoder()],
    ['nextEpochFee', getOptionDecoder(getFeeDecoder())],
    [
      'preferredDepositValidatorVoteAddress',
      getOptionDecoder(getAddressDecoder()),
    ],
    [
      'preferredWithdrawValidatorVoteAddress',
      getOptionDecoder(getAddressDecoder()),
    ],
    ['stakeDepositFee', getFeeDecoder()],
    ['stakeWithdrawalFee', getFeeDecoder()],
    ['nextStakeWithdrawalFee', getOptionDecoder(getFeeDecoder())],
    ['stakeReferralFee', getU8Decoder()],
    ['solDepositAuthority', getOptionDecoder(getAddressDecoder())],
    ['solDepositFee', getFeeDecoder()],
    ['solReferralFee', getU8Decoder()],
    ['solWithdrawAuthority', getOptionDecoder(getAddressDecoder())],
    ['solWithdrawalFee', getFeeDecoder()],
    ['nextSolWithdrawalFee', getOptionDecoder(getFeeDecoder())],
    ['lastEpochPoolTokenSupply', getU64Decoder()],
    ['lastEpochTotalLamports', getU64Decoder()],
  ]);
}

export function getStakePoolCodec(): Codec<StakePoolArgs, StakePool> {
  return combineCodec(getStakePoolEncoder(), getStakePoolDecoder());
}

export function decodeStakePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<StakePool, TAddress>;
export function decodeStakePool<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<StakePool, TAddress>;
export function decodeStakePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<StakePool, TAddress> | MaybeAccount<StakePool, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getStakePoolDecoder()
  );
}

export async function fetchStakePool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<StakePool, TAddress>> {
  const maybeAccount = await fetchMaybeStakePool(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeStakePool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<StakePool, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeStakePool(maybeAccount);
}

export async function fetchAllStakePool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<StakePool>[]> {
  const maybeAccounts = await fetchAllMaybeStakePool(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeStakePool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<StakePool>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeStakePool(maybeAccount));
}
