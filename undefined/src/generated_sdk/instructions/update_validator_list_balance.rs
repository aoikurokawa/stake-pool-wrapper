//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct UpdateValidatorListBalance {
      
              
          pub stake_pool: solana_program::pubkey::Pubkey,
          
              
          pub stake_pool_withdraw_authority: solana_program::pubkey::Pubkey,
          
              
          pub validator_list_address: solana_program::pubkey::Pubkey,
          
              
          pub reserve_stake: solana_program::pubkey::Pubkey,
          
              
          pub clock: solana_program::pubkey::Pubkey,
          
              
          pub sysvar_stake_history: solana_program::pubkey::Pubkey,
          
              
          pub stake_program: solana_program::pubkey::Pubkey,
      }

impl UpdateValidatorListBalance {
  pub fn instruction(&self, args: UpdateValidatorListBalanceInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: UpdateValidatorListBalanceInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(7+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_pool,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_pool_withdraw_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.validator_list_address,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve_stake,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.clock,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.sysvar_stake_history,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&UpdateValidatorListBalanceInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::SPL_STAKE_POOL_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct UpdateValidatorListBalanceInstructionData {
            discriminator: [u8; 8],
                  }

impl UpdateValidatorListBalanceInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [98, 93, 78, 124, 109, 4, 165, 194],
                                              }
  }
}

impl Default for UpdateValidatorListBalanceInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct UpdateValidatorListBalanceInstructionArgs {
                  pub start_index: u32,
                pub no_merge: bool,
      }


/// Instruction builder for `UpdateValidatorListBalance`.
///
/// ### Accounts:
///
          ///   0. `[]` stake_pool
          ///   1. `[]` stake_pool_withdraw_authority
                ///   2. `[writable]` validator_list_address
                ///   3. `[writable]` reserve_stake
          ///   4. `[]` clock
                ///   5. `[optional]` sysvar_stake_history (default to `SysvarStakeHistory1111111111111111111111111`)
          ///   6. `[]` stake_program
#[derive(Clone, Debug, Default)]
pub struct UpdateValidatorListBalanceBuilder {
            stake_pool: Option<solana_program::pubkey::Pubkey>,
                stake_pool_withdraw_authority: Option<solana_program::pubkey::Pubkey>,
                validator_list_address: Option<solana_program::pubkey::Pubkey>,
                reserve_stake: Option<solana_program::pubkey::Pubkey>,
                clock: Option<solana_program::pubkey::Pubkey>,
                sysvar_stake_history: Option<solana_program::pubkey::Pubkey>,
                stake_program: Option<solana_program::pubkey::Pubkey>,
                        start_index: Option<u32>,
                no_merge: Option<bool>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl UpdateValidatorListBalanceBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn stake_pool(&mut self, stake_pool: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.stake_pool = Some(stake_pool);
                    self
    }
            #[inline(always)]
    pub fn stake_pool_withdraw_authority(&mut self, stake_pool_withdraw_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.stake_pool_withdraw_authority = Some(stake_pool_withdraw_authority);
                    self
    }
            #[inline(always)]
    pub fn validator_list_address(&mut self, validator_list_address: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.validator_list_address = Some(validator_list_address);
                    self
    }
            #[inline(always)]
    pub fn reserve_stake(&mut self, reserve_stake: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.reserve_stake = Some(reserve_stake);
                    self
    }
            #[inline(always)]
    pub fn clock(&mut self, clock: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.clock = Some(clock);
                    self
    }
            /// `[optional account, default to 'SysvarStakeHistory1111111111111111111111111']`
#[inline(always)]
    pub fn sysvar_stake_history(&mut self, sysvar_stake_history: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.sysvar_stake_history = Some(sysvar_stake_history);
                    self
    }
            #[inline(always)]
    pub fn stake_program(&mut self, stake_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.stake_program = Some(stake_program);
                    self
    }
                    #[inline(always)]
      pub fn start_index(&mut self, start_index: u32) -> &mut Self {
        self.start_index = Some(start_index);
        self
      }
                #[inline(always)]
      pub fn no_merge(&mut self, no_merge: bool) -> &mut Self {
        self.no_merge = Some(no_merge);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = UpdateValidatorListBalance {
                              stake_pool: self.stake_pool.expect("stake_pool is not set"),
                                        stake_pool_withdraw_authority: self.stake_pool_withdraw_authority.expect("stake_pool_withdraw_authority is not set"),
                                        validator_list_address: self.validator_list_address.expect("validator_list_address is not set"),
                                        reserve_stake: self.reserve_stake.expect("reserve_stake is not set"),
                                        clock: self.clock.expect("clock is not set"),
                                        sysvar_stake_history: self.sysvar_stake_history.unwrap_or(solana_program::pubkey!("SysvarStakeHistory1111111111111111111111111")),
                                        stake_program: self.stake_program.expect("stake_program is not set"),
                      };
          let args = UpdateValidatorListBalanceInstructionArgs {
                                                              start_index: self.start_index.clone().expect("start_index is not set"),
                                                                  no_merge: self.no_merge.clone().expect("no_merge is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `update_validator_list_balance` CPI accounts.
  pub struct UpdateValidatorListBalanceCpiAccounts<'a, 'b> {
          
                    
              pub stake_pool: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub stake_pool_withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub validator_list_address: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub reserve_stake: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub clock: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub sysvar_stake_history: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub stake_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `update_validator_list_balance` CPI instruction.
pub struct UpdateValidatorListBalanceCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub stake_pool: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub stake_pool_withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub validator_list_address: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub reserve_stake: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub clock: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub sysvar_stake_history: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub stake_program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: UpdateValidatorListBalanceInstructionArgs,
  }

impl<'a, 'b> UpdateValidatorListBalanceCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: UpdateValidatorListBalanceCpiAccounts<'a, 'b>,
              args: UpdateValidatorListBalanceInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              stake_pool: accounts.stake_pool,
              stake_pool_withdraw_authority: accounts.stake_pool_withdraw_authority,
              validator_list_address: accounts.validator_list_address,
              reserve_stake: accounts.reserve_stake,
              clock: accounts.clock,
              sysvar_stake_history: accounts.sysvar_stake_history,
              stake_program: accounts.stake_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(7+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_pool.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_pool_withdraw_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.validator_list_address.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve_stake.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.clock.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.sysvar_stake_history.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&UpdateValidatorListBalanceInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::SPL_STAKE_POOL_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.stake_pool.clone());
                        account_infos.push(self.stake_pool_withdraw_authority.clone());
                        account_infos.push(self.validator_list_address.clone());
                        account_infos.push(self.reserve_stake.clone());
                        account_infos.push(self.clock.clone());
                        account_infos.push(self.sysvar_stake_history.clone());
                        account_infos.push(self.stake_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `UpdateValidatorListBalance` via CPI.
///
/// ### Accounts:
///
          ///   0. `[]` stake_pool
          ///   1. `[]` stake_pool_withdraw_authority
                ///   2. `[writable]` validator_list_address
                ///   3. `[writable]` reserve_stake
          ///   4. `[]` clock
          ///   5. `[]` sysvar_stake_history
          ///   6. `[]` stake_program
#[derive(Clone, Debug)]
pub struct UpdateValidatorListBalanceCpiBuilder<'a, 'b> {
  instruction: Box<UpdateValidatorListBalanceCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdateValidatorListBalanceCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(UpdateValidatorListBalanceCpiBuilderInstruction {
      __program: program,
              stake_pool: None,
              stake_pool_withdraw_authority: None,
              validator_list_address: None,
              reserve_stake: None,
              clock: None,
              sysvar_stake_history: None,
              stake_program: None,
                                            start_index: None,
                                no_merge: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn stake_pool(&mut self, stake_pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.stake_pool = Some(stake_pool);
                    self
    }
      #[inline(always)]
    pub fn stake_pool_withdraw_authority(&mut self, stake_pool_withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.stake_pool_withdraw_authority = Some(stake_pool_withdraw_authority);
                    self
    }
      #[inline(always)]
    pub fn validator_list_address(&mut self, validator_list_address: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.validator_list_address = Some(validator_list_address);
                    self
    }
      #[inline(always)]
    pub fn reserve_stake(&mut self, reserve_stake: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve_stake = Some(reserve_stake);
                    self
    }
      #[inline(always)]
    pub fn clock(&mut self, clock: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.clock = Some(clock);
                    self
    }
      #[inline(always)]
    pub fn sysvar_stake_history(&mut self, sysvar_stake_history: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.sysvar_stake_history = Some(sysvar_stake_history);
                    self
    }
      #[inline(always)]
    pub fn stake_program(&mut self, stake_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.stake_program = Some(stake_program);
                    self
    }
                    #[inline(always)]
      pub fn start_index(&mut self, start_index: u32) -> &mut Self {
        self.instruction.start_index = Some(start_index);
        self
      }
                #[inline(always)]
      pub fn no_merge(&mut self, no_merge: bool) -> &mut Self {
        self.instruction.no_merge = Some(no_merge);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = UpdateValidatorListBalanceInstructionArgs {
                                                              start_index: self.instruction.start_index.clone().expect("start_index is not set"),
                                                                  no_merge: self.instruction.no_merge.clone().expect("no_merge is not set"),
                                    };
        let instruction = UpdateValidatorListBalanceCpi {
        __program: self.instruction.__program,
                  
          stake_pool: self.instruction.stake_pool.expect("stake_pool is not set"),
                  
          stake_pool_withdraw_authority: self.instruction.stake_pool_withdraw_authority.expect("stake_pool_withdraw_authority is not set"),
                  
          validator_list_address: self.instruction.validator_list_address.expect("validator_list_address is not set"),
                  
          reserve_stake: self.instruction.reserve_stake.expect("reserve_stake is not set"),
                  
          clock: self.instruction.clock.expect("clock is not set"),
                  
          sysvar_stake_history: self.instruction.sysvar_stake_history.expect("sysvar_stake_history is not set"),
                  
          stake_program: self.instruction.stake_program.expect("stake_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct UpdateValidatorListBalanceCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            stake_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                stake_pool_withdraw_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                validator_list_address: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                reserve_stake: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                clock: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                sysvar_stake_history: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                stake_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        start_index: Option<u32>,
                no_merge: Option<bool>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

